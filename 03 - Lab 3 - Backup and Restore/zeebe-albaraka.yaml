connectors:
  enabled: false
elasticsearch:
  extraEnvVars:
  - name: S3_SECRET_KEY
    value: minioadmin
  - name: S3_ACCESS_KEY
    value: minioadmin
  extraVolumeMounts:
  - mountPath: /bitnami/elasticsearch
    name: empty-dir
    subPath: app-volume-dir
  global:
    kibanaEnabled: true
  initScripts:
    init-keystore.sh: |
      #!/bin/bash
      set -e

      echo "Adding S3 access keys to Elasticsearch keystore..."

      # Add S3 client default keys to the keystore
      echo "$S3_SECRET_KEY" | elasticsearch-keystore add -f -x s3.client.default.secret_key
      echo "$S3_ACCESS_KEY" | elasticsearch-keystore add -f -x s3.client.default.access_key
  kibana:
    readinessProbe:
      enabled: false
global:
  identity:
    auth:
      operate:
        redirectUrl: http://cp-operate.k8s.orb.local
      publicIssuerUrl: http://cp-keycloak.k8s.orb.local/auth/realms/camunda-platform
identity:
  enabled: true
  fullURL: http://cp-identity.k8s.orb.local
  ingress:
    annotations:
      ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    className: traefik
    enabled: true
    host: cp-identity.k8s.orb.local
    path: /
    pathType: Prefix
    tls:
      enabled: false
      secretName: camunda-platform-identity
identityKeycloak:
  enabled: true
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
    enabled: true
    extraTls: []
    hostname: cp-keycloak.k8s.orb.local
    pathType: Prefix
    tls: false
operate:
  env:
  - name: CAMUNDA_OPERATE_BACKUP_REPOSITORY_NAME
    value: operate-backup
  ingress:
    annotations:
      ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    className: traefik
    enabled: true
    host: cp-operate.k8s.orb.local
    path: /
    pathType: Prefix
    tls:
      enabled: false
      secretName: camunda-platform-operate
optimize:
  env:
  - name: CAMUNDA_OPTIMIZE_BACKUP_REPOSITORY_NAME
    value: optimize-backup
prometheusServiceMonitor:
  enabled: true
  labels:
    release: prometheus
tasklist:
  env:
  - name: CAMUNDA_TASKLIST_BACKUP_REPOSITORY_NAME
    value: tasklist-backup
zeebe:
  affinity: none
  env:
  - name: ZEEBE_BROKER_DATA_BACKUP_STORE
    value: S3
  - name: ZEEBE_BROKER_DATA_BACKUP_S3_BUCKETNAME
    value: zeebe-backup
  - name: ZEEBE_BROKER_DATA_BACKUP_S3_FORCEPATHSTYLEACCESS
    value: "true"
  - name: ZEEBE_BROKER_DATA_BACKUP_S3_ENDPOINT
    value: http://minio:9000
  - name: ZEEBE_BROKER_DATA_BACKUP_S3_ACCESSKEY
    value: minioadmin
  - name: ZEEBE_BROKER_DATA_BACKUP_S3_SECRETKEY
    value: minioadmin
  - name: ZEEBE_BROKER_DATA_BACKUP_S3_REGION
    value: us-east-1
zeebe-gateway:
  env:
  - name: ZEEBE_GATEWAY_SECURITY_AUTHENTICATION_MODE
    value: none
  replicas: 1

COMPUTED VALUES:
common:
  exampleValue: common-chart
  global:
    annotations: {}
    createReleaseInfo: true
    elasticsearch:
      auth:
        existingSecret: null
        existingSecretKey: null
        password: null
        username: null
      clusterName: elasticsearch
      disableExporter: false
      enabled: true
      external: false
      prefix: zeebe-record
      tls:
        enabled: false
        existingSecret: null
      url:
        host: '{{ .Release.Name }}-elasticsearch'
        port: 9200
        protocol: http
    identity:
      auth:
        connectors:
          clientId: connectors
          existingSecret: null
          existingSecretKey: connectors-secret
        console:
          audience: console-api
          clientId: console
          existingSecret: null
          existingSecretKey: console-secret
          redirectUrl: http://localhost:8080
          wellKnown: https://well-known-uri
        enabled: true
        identity:
          audience: camunda-identity-resource-server
          clientId: camunda-identity
          existingSecret: null
          existingSecretKey: identity-secret
          initialClaimName: oid
          initialClaimValue: null
          redirectUrl: http://localhost:8085
        issuer: ""
        issuerBackendUrl: ""
        jwksUrl: ""
        operate:
          audience: operate-api
          clientId: operate
          existingSecret: null
          existingSecretKey: operate-secret
          redirectUrl: http://localhost:8081
        optimize:
          audience: optimize-api
          clientId: optimize
          existingSecret: null
          existingSecretKey: optimize-secret
          redirectUrl: http://localhost:8083
        publicIssuerUrl: http://localhost:18080/auth/realms/camunda-platform
        tasklist:
          audience: tasklist-api
          clientId: tasklist
          existingSecret: null
          existingSecretKey: tasklist-secret
          redirectUrl: http://localhost:8082
        tokenUrl: ""
        type: KEYCLOAK
        webModeler:
          clientApiAudience: web-modeler-api
          clientId: web-modeler
          publicApiAudience: web-modeler-public-api
          redirectUrl: http://localhost:8084
        zeebe:
          audience: zeebe-api
          clientId: zeebe
          existingSecret: null
          existingSecretKey: zeebe-secret
          tokenScope: null
      image:
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: camunda/identity
        tag: 8.5.11
      keycloak:
        auth: {}
        contextPath: /auth
        internal: false
        realm: /realms/camunda-platform
        url: {}
      service:
        url: null
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: ""
      tag: null
    ingress:
      annotations:
        ingress.kubernetes.io/rewrite-target: /
        nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
        nginx.ingress.kubernetes.io/proxy-buffering: "on"
        nginx.ingress.kubernetes.io/ssl-redirect: "false"
      className: traefik
      enabled: false
      host: ""
      pathType: Prefix
      tls:
        enabled: false
        secretName: camunda-platform
    labels:
      app: camunda-platform
    multiregion:
      installationType: normal
      regionId: 0
      regions: 1
    multitenancy:
      enabled: false
    opensearch:
      auth:
        existingSecret: null
        existingSecretKey: null
        password: null
        username: null
      aws:
        enabled: false
      enabled: false
      tls:
        enabled: false
        existingSecret: null
      url:
        host: null
        port: 443
        protocol: https
    secrets:
      annotations:
        helm.sh/hook: pre-install
        helm.sh/resource-policy: keep
      autoGenerated: false
      name: camunda-credentials-autogen
    testDeprecationFlags:
      existingSecretsMustBeSet: ignore
    zeebeClusterName: '{{ .Release.Name }}-zeebe'
connectors:
  affinity: {}
  command: []
  configuration: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
    seccompProfile:
      type: RuntimeDefault
  contextPath: ""
  dnsConfig: {}
  dnsPolicy: ""
  enabled: true
  env: []
  envFrom: []
  extraConfiguration: {}
  extraVolumeMounts: []
  extraVolumes: []
  image:
    pullSecrets: []
    registry: ""
    repository: camunda/connectors-bundle
    tag: 8.5.12
  inbound:
    auth:
      existingSecret: ""
      existingSecretKey: connectors-secret
    mode: oauth
  ingress:
    annotations:
      ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    className: traefik
    enabled: true
    host: "cp-connector.k8s.orb.local"
    path: /
    pathType: Prefix
    tls:
      enabled: false
      secretName: camunda-platform-connectors
  initContainers: []
  livenessProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health/liveness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  logging:
    level:
      io.camunda.connector: ERROR
  metrics:
    prometheus: /actuator/prometheus
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 1001
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health/readiness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  replicas: 1
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 1
      memory: 1Gi
  service:
    annotations: {}
    serverName: http
    serverPort: 8080
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    enabled: true
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health/readiness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []
console:
  affinity: {}
  command: []
  configuration: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
    seccompProfile:
      type: RuntimeDefault
  contextPath: ""
  dnsConfig: {}
  dnsPolicy: ""
  enabled: false
  env: []
  envFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    pullSecrets: []
    registry: registry.camunda.cloud
    repository: console/console-sm
    tag: 8.5.113
  ingress:
    annotations:
      ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    className: traefik
    enabled: true
    host: "cp-console.k8s.orb.local"
    path: /
    pathType: Prefix
    tls:
      enabled: false
      secretName: camunda-platform-console
  initContainers: []
  keycloak:
    realm: camunda-platform
  livenessProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /health/liveness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  logging: {}
  metrics:
    prometheus: /prometheus
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 1001
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /health/readiness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  replicas: 1
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 1
      memory: 1Gi
  service:
    annotations: {}
    managementPort: 9100
    port: 80
    serverName: http
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    enabled: true
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /health/readiness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []
elasticsearch:
  clusterDomain: cluster.local
  clusterName: elastic
  common:
    exampleValue: common-chart
    global:
      annotations: {}
      compatibility:
        openshift:
          adaptSecurityContext: auto
      createReleaseInfo: true
      elasticsearch:
        auth:
          existingSecret: null
          existingSecretKey: null
          password: null
          username: null
        clusterName: elasticsearch
        disableExporter: false
        enabled: true
        external: false
        prefix: zeebe-record
        service:
          name: elasticsearch
          ports:
            restAPI: 9200
        tls:
          enabled: false
          existingSecret: null
        url:
          host: '{{ .Release.Name }}-elasticsearch'
          port: 9200
          protocol: http
      identity:
        auth:
          connectors:
            clientId: connectors
            existingSecret: null
            existingSecretKey: connectors-secret
          console:
            audience: console-api
            clientId: console
            existingSecret: null
            existingSecretKey: console-secret
            redirectUrl: http://localhost:8080
            wellKnown: https://well-known-uri
          enabled: true
          identity:
            audience: camunda-identity-resource-server
            clientId: camunda-identity
            existingSecret: null
            existingSecretKey: identity-secret
            initialClaimName: oid
            initialClaimValue: null
            redirectUrl: http://localhost:8085
          issuer: ""
          issuerBackendUrl: ""
          jwksUrl: ""
          operate:
            audience: operate-api
            clientId: operate
            existingSecret: null
            existingSecretKey: operate-secret
            redirectUrl: http://localhost:8081
          optimize:
            audience: optimize-api
            clientId: optimize
            existingSecret: null
            existingSecretKey: optimize-secret
            redirectUrl: http://localhost:8083
          publicIssuerUrl: http://localhost:18080/auth/realms/camunda-platform
          tasklist:
            audience: tasklist-api
            clientId: tasklist
            existingSecret: null
            existingSecretKey: tasklist-secret
            redirectUrl: http://localhost:8082
          tokenUrl: ""
          type: KEYCLOAK
          webModeler:
            clientApiAudience: web-modeler-api
            clientId: web-modeler
            publicApiAudience: web-modeler-public-api
            redirectUrl: http://localhost:8084
          zeebe:
            audience: zeebe-api
            clientId: zeebe
            existingSecret: null
            existingSecretKey: zeebe-secret
            tokenScope: null
        image:
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: camunda/identity
          tag: 8.5.11
        keycloak:
          auth: {}
          contextPath: /auth
          internal: false
          realm: /realms/camunda-platform
          url: {}
        service:
          url: null
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: ""
        tag: null
      imagePullSecrets: []
      imageRegistry: ""
      ingress:
        annotations:
          ingress.kubernetes.io/rewrite-target: /
          nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
        className: traefik
        enabled: true
        host: "cp-identity.k8s.orb.local"
        pathType: Prefix
        tls:
          enabled: false
          secretName: camunda-platform
      kibanaEnabled: true
      labels:
        app: camunda-platform
      multiregion:
        installationType: normal
        regionId: 0
        regions: 1
      multitenancy:
        enabled: false
      opensearch:
        auth:
          existingSecret: null
          existingSecretKey: null
          password: null
          username: null
        aws:
          enabled: false
        enabled: false
        tls:
          enabled: false
          existingSecret: null
        url:
          host: null
          port: 443
          protocol: https
      secrets:
        annotations:
          helm.sh/hook: pre-install
          helm.sh/resource-policy: keep
        autoGenerated: false
        name: camunda-credentials-autogen
      storageClass: ""
      testDeprecationFlags:
        existingSecretsMustBeSet: ignore
      zeebeClusterName: '{{ .Release.Name }}-zeebe'
  commonAnnotations: {}
  commonLabels: {}
  config: {}
  containerPorts:
    restAPI: 9200
    transport: 9300
  coordinating:
    affinity: {}
    annotations: {}
    args: []
    automountServiceAccountToken: false
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 3
      targetCPU: ""
      targetMemory: ""
    command: []
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraRoles: []
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    heapSize: 128m
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 180
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    nameOverride: ""
    networkPolicy:
      allowExternal: true
      allowExternalEgress: true
      enabled: true
      extraEgress: []
      extraIngress: []
      ingressNSMatchLabels: {}
      ingressNSPodMatchLabels: {}
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: ""
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 0
    resources: {}
    resourcesPreset: small
    schedulerName: ""
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      name: ""
    servicenameOverride: ""
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  data:
    affinity: {}
    annotations: {}
    args: []
    automountServiceAccountToken: false
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 3
      targetCPU: ""
      targetMemory: ""
    command: []
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraRoles: []
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    heapSize: 1024m
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 180
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    nameOverride: ""
    networkPolicy:
      allowExternal: true
      allowExternalEgress: true
      enabled: true
      extraEgress: []
      extraIngress: []
      ingressNSMatchLabels: {}
      ingressNSPodMatchLabels: {}
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      existingVolume: ""
      selector: {}
      size: 8Gi
      storageClass: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: ""
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 0
    resources: {}
    resourcesPreset: medium
    schedulerName: ""
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      name: ""
    servicenameOverride: ""
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  extraConfig: {}
  extraDeploy: []
  extraEnvVars:
  - name: S3_SECRET_KEY
    value: minioadmin
  - name: S3_ACCESS_KEY
    value: minioadmin
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraHosts: []
  extraVolumeMounts:
  - mountPath: /bitnami/elasticsearch
    name: empty-dir
    subPath: app-volume-dir
  extraVolumes: []
  fullnameOverride: ""
  global:
    annotations: {}
    compatibility:
      openshift:
        adaptSecurityContext: auto
    createReleaseInfo: true
    elasticsearch:
      auth:
        existingSecret: null
        existingSecretKey: null
        password: null
        username: null
      clusterName: elasticsearch
      disableExporter: false
      enabled: true
      external: false
      prefix: zeebe-record
      service:
        name: elasticsearch
        ports:
          restAPI: 9200
      tls:
        enabled: false
        existingSecret: null
      url:
        host: '{{ .Release.Name }}-elasticsearch'
        port: 9200
        protocol: http
    identity:
      auth:
        connectors:
          clientId: connectors
          existingSecret: null
          existingSecretKey: connectors-secret
        console:
          audience: console-api
          clientId: console
          existingSecret: null
          existingSecretKey: console-secret
          redirectUrl: http://localhost:8080
          wellKnown: https://well-known-uri
        enabled: true
        identity:
          audience: camunda-identity-resource-server
          clientId: camunda-identity
          existingSecret: null
          existingSecretKey: identity-secret
          initialClaimName: oid
          initialClaimValue: null
          redirectUrl: http://localhost:8085
        issuer: ""
        issuerBackendUrl: ""
        jwksUrl: ""
        operate:
          audience: operate-api
          clientId: operate
          existingSecret: null
          existingSecretKey: operate-secret
          redirectUrl: http://localhost:8081
        optimize:
          audience: optimize-api
          clientId: optimize
          existingSecret: null
          existingSecretKey: optimize-secret
          redirectUrl: http://localhost:8083
        publicIssuerUrl: http://localhost:18080/auth/realms/camunda-platform
        tasklist:
          audience: tasklist-api
          clientId: tasklist
          existingSecret: null
          existingSecretKey: tasklist-secret
          redirectUrl: http://localhost:8082
        tokenUrl: ""
        type: KEYCLOAK
        webModeler:
          clientApiAudience: web-modeler-api
          clientId: web-modeler
          publicApiAudience: web-modeler-public-api
          redirectUrl: http://localhost:8084
        zeebe:
          audience: zeebe-api
          clientId: zeebe
          existingSecret: null
          existingSecretKey: zeebe-secret
          tokenScope: null
      image:
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: camunda/identity
        tag: 8.5.11
      keycloak:
        auth: {}
        contextPath: /auth
        internal: false
        realm: /realms/camunda-platform
        url: {}
      service:
        url: null
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: ""
      tag: null
    imagePullSecrets: []
    imageRegistry: ""
    ingress:
      annotations:
        ingress.kubernetes.io/rewrite-target: /
        nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
        nginx.ingress.kubernetes.io/proxy-buffering: "on"
        nginx.ingress.kubernetes.io/ssl-redirect: "false"
      className: traefik
      enabled: false
      host: ""
      pathType: Prefix
      tls:
        enabled: false
        secretName: camunda-platform
    kibanaEnabled: true
    labels:
      app: camunda-platform
    multiregion:
      installationType: normal
      regionId: 0
      regions: 1
    multitenancy:
      enabled: false
    opensearch:
      auth:
        existingSecret: null
        existingSecretKey: null
        password: null
        username: null
      aws:
        enabled: false
      enabled: false
      tls:
        enabled: false
        existingSecret: null
      url:
        host: null
        port: 443
        protocol: https
    secrets:
      annotations:
        helm.sh/hook: pre-install
        helm.sh/resource-policy: keep
      autoGenerated: false
      name: camunda-credentials-autogen
    storageClass: ""
    testDeprecationFlags:
      existingSecretsMustBeSet: ignore
    zeebeClusterName: '{{ .Release.Name }}-zeebe'
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/elasticsearch
    tag: 8.12.2
  ingest:
    affinity: {}
    annotations: {}
    args: []
    automountServiceAccountToken: false
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 3
      targetCPU: ""
      targetMemory: ""
    command: []
    containerPorts:
      restAPI: 9200
      transport: 9300
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraRoles: []
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    heapSize: 128m
    hostAliases: []
    ingress:
      annotations: {}
      apiVersion: ""
      enabled: false
      extraHosts: []
      extraPaths: []
      extraRules: []
      extraTls: []
      hostname: elasticsearch-ingest.local
      ingressClassName: ""
      path: /
      pathType: ImplementationSpecific
      secrets: []
      selfSigned: false
      tls: false
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 180
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    nameOverride: ""
    networkPolicy:
      allowExternal: true
      allowExternalEgress: true
      enabled: true
      extraEgress: []
      extraIngress: []
      ingressNSMatchLabels: {}
      ingressNSPodMatchLabels: {}
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: ""
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 2
    resources: {}
    resourcesPreset: small
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      enabled: false
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        restAPI: ""
        transport: ""
      ports:
        restAPI: 9200
        transport: 9300
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      name: ""
    servicenameOverride: ""
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []
    hostname: elasticsearch.local
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
    selfSigned: false
    tls: false
  initContainers: []
  initScripts:
    init-keystore.sh: |
      #!/bin/bash
      set -e

      echo "Adding S3 access keys to Elasticsearch keystore..."

      # Add S3 client default keys to the keystore
      echo "$S3_SECRET_KEY" | elasticsearch-keystore add -f -x s3.client.default.secret_key
      echo "$S3_ACCESS_KEY" | elasticsearch-keystore add -f -x s3.client.default.access_key
  initScriptsCM: ""
  initScriptsSecret: ""
  kibana:
    affinity: {}
    args: []
    automountServiceAccountToken: false
    clusterDomain: cluster.local
    command: []
    common:
      exampleValue: common-chart
      global:
        annotations: {}
        compatibility:
          openshift:
            adaptSecurityContext: auto
        createReleaseInfo: true
        elasticsearch:
          auth:
            existingSecret: null
            existingSecretKey: null
            password: null
            username: null
          clusterName: elasticsearch
          disableExporter: false
          enabled: true
          external: false
          prefix: zeebe-record
          service:
            name: elasticsearch
            ports:
              restAPI: 9200
          tls:
            enabled: false
            existingSecret: null
          url:
            host: '{{ .Release.Name }}-elasticsearch'
            port: 9200
            protocol: http
        identity:
          auth:
            connectors:
              clientId: connectors
              existingSecret: null
              existingSecretKey: connectors-secret
            console:
              audience: console-api
              clientId: console
              existingSecret: null
              existingSecretKey: console-secret
              redirectUrl: http://localhost:8080
              wellKnown: https://well-known-uri
            enabled: true
            identity:
              audience: camunda-identity-resource-server
              clientId: camunda-identity
              existingSecret: null
              existingSecretKey: identity-secret
              initialClaimName: oid
              initialClaimValue: null
              redirectUrl: http://localhost:8085
            issuer: ""
            issuerBackendUrl: ""
            jwksUrl: ""
            operate:
              audience: operate-api
              clientId: operate
              existingSecret: null
              existingSecretKey: operate-secret
              redirectUrl: http://localhost:8081
            optimize:
              audience: optimize-api
              clientId: optimize
              existingSecret: null
              existingSecretKey: optimize-secret
              redirectUrl: http://localhost:8083
            publicIssuerUrl: http://localhost:18080/auth/realms/camunda-platform
            tasklist:
              audience: tasklist-api
              clientId: tasklist
              existingSecret: null
              existingSecretKey: tasklist-secret
              redirectUrl: http://localhost:8082
            tokenUrl: ""
            type: KEYCLOAK
            webModeler:
              clientApiAudience: web-modeler-api
              clientId: web-modeler
              publicApiAudience: web-modeler-public-api
              redirectUrl: http://localhost:8084
            zeebe:
              audience: zeebe-api
              clientId: zeebe
              existingSecret: null
              existingSecretKey: zeebe-secret
              tokenScope: null
          image:
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: camunda/identity
            tag: 8.5.11
          keycloak:
            auth: {}
            contextPath: /auth
            internal: false
            realm: /realms/camunda-platform
            url: {}
          service:
            url: null
        image:
          pullPolicy: IfNotPresent
          pullSecrets: []
          registry: ""
          tag: null
        imagePullSecrets: []
        imageRegistry: ""
        ingress:
          annotations:
            ingress.kubernetes.io/rewrite-target: /
            nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
            nginx.ingress.kubernetes.io/proxy-buffering: "on"
            nginx.ingress.kubernetes.io/ssl-redirect: "false"
          className: traefik
          enabled: false
          host: ""
          pathType: Prefix
          tls:
            enabled: false
            secretName: camunda-platform
        kibanaEnabled: false
        labels:
          app: camunda-platform
        multiregion:
          installationType: normal
          regionId: 0
          regions: 1
        multitenancy:
          enabled: false
        opensearch:
          auth:
            existingSecret: null
            existingSecretKey: null
            password: null
            username: null
          aws:
            enabled: false
          enabled: false
          tls:
            enabled: false
            existingSecret: null
          url:
            host: null
            port: 443
            protocol: https
        secrets:
          annotations:
            helm.sh/hook: pre-install
            helm.sh/resource-policy: keep
          autoGenerated: false
          name: camunda-credentials-autogen
        storageClass: ""
        testDeprecationFlags:
          existingSecretsMustBeSet: ignore
        zeebeClusterName: '{{ .Release.Name }}-zeebe'
    commonAnnotations: {}
    commonLabels: {}
    configuration:
      server:
        basePath: ""
        rewriteBasePath: false
    configurationCM: ""
    containerPorts:
      http: 5601
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: false
      runAsGroup: 0
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: null
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    diagnosticMode:
      args:
      - infinity
      command:
      - sleep
      enabled: false
    elasticsearch:
      hosts:
      - '{{ include "elasticsearch.service.name" . }}'
      port: '{{ include "elasticsearch.service.ports.restAPI" . }}'
      security:
        auth:
          createSystemUser: false
          elasticsearchPasswordSecret: ""
          enabled: false
          existingSecret: ""
          kibanaPassword: ""
        tls:
          enabled: false
          existingSecret: ""
          passwordsSecret: ""
          truststorePassword: ""
          usePemCerts: false
          verificationMode: full
    extraConfiguration: {}
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    forceInitScripts: false
    fullnameOverride: ""
    global:
      annotations: {}
      compatibility:
        openshift:
          adaptSecurityContext: auto
      createReleaseInfo: true
      elasticsearch:
        auth:
          existingSecret: null
          existingSecretKey: null
          password: null
          username: null
        clusterName: elasticsearch
        disableExporter: false
        enabled: true
        external: false
        prefix: zeebe-record
        service:
          name: elasticsearch
          ports:
            restAPI: 9200
        tls:
          enabled: false
          existingSecret: null
        url:
          host: '{{ .Release.Name }}-elasticsearch'
          port: 9200
          protocol: http
      identity:
        auth:
          connectors:
            clientId: connectors
            existingSecret: null
            existingSecretKey: connectors-secret
          console:
            audience: console-api
            clientId: console
            existingSecret: null
            existingSecretKey: console-secret
            redirectUrl: http://localhost:8080
            wellKnown: https://well-known-uri
          enabled: true
          identity:
            audience: camunda-identity-resource-server
            clientId: camunda-identity
            existingSecret: null
            existingSecretKey: identity-secret
            initialClaimName: oid
            initialClaimValue: null
            redirectUrl: http://localhost:8085
          issuer: ""
          issuerBackendUrl: ""
          jwksUrl: ""
          operate:
            audience: operate-api
            clientId: operate
            existingSecret: null
            existingSecretKey: operate-secret
            redirectUrl: http://localhost:8081
          optimize:
            audience: optimize-api
            clientId: optimize
            existingSecret: null
            existingSecretKey: optimize-secret
            redirectUrl: http://localhost:8083
          publicIssuerUrl: http://localhost:18080/auth/realms/camunda-platform
          tasklist:
            audience: tasklist-api
            clientId: tasklist
            existingSecret: null
            existingSecretKey: tasklist-secret
            redirectUrl: http://localhost:8082
          tokenUrl: ""
          type: KEYCLOAK
          webModeler:
            clientApiAudience: web-modeler-api
            clientId: web-modeler
            publicApiAudience: web-modeler-public-api
            redirectUrl: http://localhost:8084
          zeebe:
            audience: zeebe-api
            clientId: zeebe
            existingSecret: null
            existingSecretKey: zeebe-secret
            tokenScope: null
        image:
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: camunda/identity
          tag: 8.5.11
        keycloak:
          auth: {}
          contextPath: /auth
          internal: false
          realm: /realms/camunda-platform
          url: {}
        service:
          url: null
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: ""
        tag: null
      imagePullSecrets: []
      imageRegistry: ""
      ingress:
        annotations:
          ingress.kubernetes.io/rewrite-target: /
          nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
        className: traefik
        enabled: false
        host: ""
        pathType: Prefix
        tls:
          enabled: false
          secretName: camunda-platform
      kibanaEnabled: false
      labels:
        app: camunda-platform
      multiregion:
        installationType: normal
        regionId: 0
        regions: 1
      multitenancy:
        enabled: false
      opensearch:
        auth:
          existingSecret: null
          existingSecretKey: null
          password: null
          username: null
        aws:
          enabled: false
        enabled: false
        tls:
          enabled: false
          existingSecret: null
        url:
          host: null
          port: 443
          protocol: https
      secrets:
        annotations:
          helm.sh/hook: pre-install
          helm.sh/resource-policy: keep
        autoGenerated: false
        name: camunda-credentials-autogen
      storageClass: ""
      testDeprecationFlags:
        existingSecretsMustBeSet: ignore
      zeebeClusterName: '{{ .Release.Name }}-zeebe'
    hostAliases: []
    image:
      debug: false
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/kibana
      tag: 8.12.2-debian-12-r1
    ingress:
      annotations: {}
      apiVersion: ""
      enabled: false
      extraHosts: []
      extraPaths: []
      extraRules: []
      extraTls: []
      hostname: kibana.local
      ingressClassName: ""
      path: /
      pathType: ImplementationSpecific
      secrets: []
      selfSigned: false
      tls: false
    initContainers: []
    initScriptsCM: ""
    initScriptsSecret: ""
    kubeVersion: ""
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    metrics:
      enabled: false
      service:
        annotations:
          prometheus.io/path: _prometheus/metrics
          prometheus.io/port: "80"
          prometheus.io/scrape: "true"
      serviceMonitor:
        enabled: false
        honorLabels: false
        interval: ""
        jobLabel: ""
        labels: {}
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
        selector: {}
    nameOverride: ""
    networkPolicy:
      allowExternal: true
      allowExternalEgress: true
      enabled: true
      extraEgress: []
      extraIngress: []
      ingressNSMatchLabels: {}
      ingressNSPodMatchLabels: {}
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      selector: {}
      size: 10Gi
      storageClass: ""
      subPath: ""
    plugins: []
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    priorityClassName: ""
    readinessProbe:
      enabled: false
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources: {}
    resourcesPreset: none
    savedObjects:
      configmap: ""
      urls: []
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        http: ""
      ports:
        http: 5601
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      name: ""
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 6
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: ""
    tls:
      autoGenerated: false
      enabled: false
      existingSecret: ""
      keyPassword: ""
      keystorePassword: ""
      passwordsSecret: ""
      usePemCerts: false
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
    volumePermissions:
      enabled: false
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/os-shell
        tag: 12-debian-12-r16
      resources: {}
      resourcesPreset: none
  kubeVersion: ""
  master:
    affinity: {}
    annotations: {}
    args: []
    automountServiceAccountToken: false
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 3
      targetCPU: ""
      targetMemory: ""
    command: []
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extraEnvVars:
    - name: ELASTICSEARCH_ENABLE_REST_TLS
      value: "false"
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraRoles: []
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    heapSize: 1024m
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 180
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    masterOnly: false
    nameOverride: ""
    networkPolicy:
      allowExternal: true
      allowExternalEgress: true
      enabled: true
      extraEgress: []
      extraIngress: []
      ingressNSMatchLabels: {}
      ingressNSPodMatchLabels: {}
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      existingVolume: ""
      selector: {}
      size: 64Gi
      storageClass: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: ""
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 2
    resources:
      limits:
        cpu: 2
        memory: 2Gi
      requests:
        cpu: 1
        memory: 2Gi
    resourcesPreset: small
    schedulerName: ""
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      name: ""
    servicenameOverride: ""
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  metrics:
    affinity: {}
    annotations:
      helm.sh/hook: post-install,post-upgrade
      helm.sh/hook-weight: "5"
    args: []
    automountServiceAccountToken: false
    command: []
    containerPorts:
      http: 9114
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraArgs: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    hostAliases: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/elasticsearch-exporter
      tag: 1.7.0-debian-12-r14
    initContainers: []
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    nameOverride: ""
    networkPolicy:
      allowExternal: true
      allowExternalEgress: true
      enabled: true
      extraEgress: []
      extraIngress: []
      ingressNSMatchLabels: {}
      ingressNSPodMatchLabels: {}
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    podAffinityPreset: ""
    podAnnotations:
      prometheus.io/port: "9114"
      prometheus.io/scrape: "true"
    podAntiAffinityPreset: ""
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    priorityClassName: ""
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources: {}
    resourcesPreset: nano
    schedulerName: ""
    service:
      annotations:
        prometheus.io/port: "9114"
        prometheus.io/scrape: "true"
      port: 9114
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      name: ""
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ""
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    tolerations: []
    topologySpreadConstraints: []
  nameOverride: ""
  namespaceOverride: ""
  plugins: ""
  security:
    elasticPassword: ""
    enabled: false
    existingSecret: ""
    fipsMode: false
    tls:
      autoGenerated: false
      coordinating:
        existingSecret: ""
      data:
        existingSecret: ""
      ingest:
        existingSecret: ""
      keyPassword: ""
      keystoreFilename: elasticsearch.keystore.jks
      keystorePassword: ""
      master:
        existingSecret: ""
      passwordsSecret: ""
      restEncryption: true
      secretKey: ""
      secretKeystoreKey: ""
      secretTruststoreKey: ""
      truststoreFilename: elasticsearch.truststore.jks
      truststorePassword: ""
      usePemCerts: false
      verificationMode: full
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      restAPI: ""
      transport: ""
    ports:
      restAPI: 9200
      transport: 9300
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  sidecars: []
  snapshotRepoPath: ""
  sysctlImage:
    digest: ""
    enabled: true
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/os-shell
    resources: {}
    resourcesPreset: nano
    tag: 12-debian-12-r18
  useIstioLabels: true
  volumePermissions:
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/os-shell
      tag: 12-debian-12-r18
    resources: {}
    resourcesPreset: nano
global:
  annotations: {}
  createReleaseInfo: true
  elasticsearch:
    auth:
      existingSecret: null
      existingSecretKey: null
      password: null
      username: null
    clusterName: elasticsearch
    disableExporter: false
    enabled: true
    external: false
    prefix: zeebe-record
    tls:
      enabled: false
      existingSecret: null
    url:
      host: '{{ .Release.Name }}-elasticsearch'
      port: 9200
      protocol: http
  identity:
    auth:
      connectors:
        clientId: connectors
        existingSecret: null
        existingSecretKey: connectors-secret
      console:
        audience: console-api
        clientId: console
        existingSecret: null
        existingSecretKey: console-secret
        redirectUrl: http://localhost:8080
        wellKnown: https://well-known-uri
      enabled: true
      identity:
        audience: camunda-identity-resource-server
        clientId: camunda-identity
        existingSecret: null
        existingSecretKey: identity-secret
        initialClaimName: oid
        initialClaimValue: null
        redirectUrl: http://localhost:8085
      issuer: ""
      issuerBackendUrl: ""
      jwksUrl: ""
      operate:
        audience: operate-api
        clientId: operate
        existingSecret: null
        existingSecretKey: operate-secret
        redirectUrl: http://cp-operate.k8s.orb.local
      optimize:
        audience: optimize-api
        clientId: optimize
        existingSecret: null
        existingSecretKey: optimize-secret
        redirectUrl: http://localhost:8083
      publicIssuerUrl: http://cp-keycloak.k8s.orb.local/auth/realms/camunda-platform
      tasklist:
        audience: tasklist-api
        clientId: tasklist
        existingSecret: null
        existingSecretKey: tasklist-secret
        redirectUrl: http://localhost:8082
      tokenUrl: ""
      type: KEYCLOAK
      webModeler:
        clientApiAudience: web-modeler-api
        clientId: web-modeler
        publicApiAudience: web-modeler-public-api
        redirectUrl: http://localhost:8084
      zeebe:
        audience: zeebe-api
        clientId: zeebe
        existingSecret: null
        existingSecretKey: zeebe-secret
        tokenScope: null
    image:
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: camunda/identity
      tag: 8.5.11
    keycloak:
      auth: {}
      contextPath: /auth
      internal: false
      realm: /realms/camunda-platform
      url: {}
    service:
      url: null
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: ""
    tag: null
  ingress:
    annotations:
      ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    className: traefik
    enabled: false
    host: "cp-keycloak.k8s.orb.local"
    pathType: Prefix
    tls:
      enabled: false
      secretName: camunda-platform
  labels:
    app: camunda-platform
  multiregion:
    installationType: normal
    regionId: 0
    regions: 1
  multitenancy:
    enabled: false
  opensearch:
    auth:
      existingSecret: null
      existingSecretKey: null
      password: null
      username: null
    aws:
      enabled: false
    enabled: false
    tls:
      enabled: false
      existingSecret: null
    url:
      host: null
      port: 443
      protocol: https
  secrets:
    annotations:
      helm.sh/hook: pre-install
      helm.sh/resource-policy: keep
    autoGenerated: false
    name: camunda-credentials-autogen
  testDeprecationFlags:
    existingSecretsMustBeSet: ignore
  zeebeClusterName: '{{ .Release.Name }}-zeebe'
identity:
  affinity: {}
  command: []
  configuration: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
    seccompProfile:
      type: RuntimeDefault
  contextPath: ""
  dnsConfig: {}
  dnsPolicy: ""
  enabled: true
  env: []
  envFrom: []
  externalDatabase:
    database: null
    enabled: false
    existingSecret: null
    existingSecretPasswordKey: null
    host: null
    password: null
    port: null
    username: null
  extraConfiguration: {}
  extraVolumeMounts: []
  extraVolumes: []
  firstUser:
    email: demo@example.org
    enabled: true
    existingSecret: ""
    existingSecretKey: identity-firstuser-password
    firstName: Demo
    lastName: User
    password: demo
    username: demo
  fullURL: http://cp-identity.k8s.orb.local
  fullnameOverride: ""
  image:
    pullSecrets: []
    registry: ""
    repository: camunda/identity
    tag: 8.5.11
  ingress:
    annotations:
      ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    className: traefik
    enabled: true
    host: cp-identity.k8s.orb.local
    path: /
    pathType: Prefix
    tls:
      enabled: false
      secretName: camunda-platform-identity
  initContainers: []
  livenessProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  metrics:
    prometheus: /actuator/prometheus
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 1001
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 600m
      memory: 400Mi
  service:
    annotations: {}
    metricsName: metrics
    metricsPort: 82
    port: 80
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    enabled: true
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []
identityKeycloak:
  adminIngress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []
    hostname: keycloak.local
    ingressClassName: ""
    labels: {}
    path: '{{ .Values.httpRelativePath }}'
    pathType: ImplementationSpecific
    secrets: []
    selfSigned: false
    servicePort: http
    tls: false
  affinity: {}
  args: []
  auth:
    adminPassword: ""
    adminUser: admin
    annotations: {}
    existingSecret: ""
    passwordSecretKey: admin-password
  automountServiceAccountToken: true
  autoscaling:
    enabled: false
    maxReplicas: 11
    minReplicas: 1
    targetCPU: ""
    targetMemory: ""
  cache:
    enabled: true
    stackFile: ""
    stackName: kubernetes
  clusterDomain: cluster.local
  command: []
  common:
    exampleValue: common-chart
    global:
      annotations: {}
      compatibility:
        openshift:
          adaptSecurityContext: disabled
      createReleaseInfo: true
      elasticsearch:
        auth:
          existingSecret: null
          existingSecretKey: null
          password: null
          username: null
        clusterName: elasticsearch
        disableExporter: false
        enabled: true
        external: false
        prefix: zeebe-record
        tls:
          enabled: false
          existingSecret: null
        url:
          host: '{{ .Release.Name }}-elasticsearch'
          port: 9200
          protocol: http
      identity:
        auth:
          connectors:
            clientId: connectors
            existingSecret: null
            existingSecretKey: connectors-secret
          console:
            audience: console-api
            clientId: console
            existingSecret: null
            existingSecretKey: console-secret
            redirectUrl: http://localhost:8080
            wellKnown: https://well-known-uri
          enabled: true
          identity:
            audience: camunda-identity-resource-server
            clientId: camunda-identity
            existingSecret: null
            existingSecretKey: identity-secret
            initialClaimName: oid
            initialClaimValue: null
            redirectUrl: http://localhost:8085
          issuer: ""
          issuerBackendUrl: ""
          jwksUrl: ""
          operate:
            audience: operate-api
            clientId: operate
            existingSecret: null
            existingSecretKey: operate-secret
            redirectUrl: http://localhost:8081
          optimize:
            audience: optimize-api
            clientId: optimize
            existingSecret: null
            existingSecretKey: optimize-secret
            redirectUrl: http://localhost:8083
          publicIssuerUrl: http://localhost:18080/auth/realms/camunda-platform
          tasklist:
            audience: tasklist-api
            clientId: tasklist
            existingSecret: null
            existingSecretKey: tasklist-secret
            redirectUrl: http://localhost:8082
          tokenUrl: ""
          type: KEYCLOAK
          webModeler:
            clientApiAudience: web-modeler-api
            clientId: web-modeler
            publicApiAudience: web-modeler-public-api
            redirectUrl: http://localhost:8084
          zeebe:
            audience: zeebe-api
            clientId: zeebe
            existingSecret: null
            existingSecretKey: zeebe-secret
            tokenScope: null
        image:
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: camunda/identity
          tag: 8.5.11
        keycloak:
          auth: {}
          contextPath: /auth
          internal: false
          realm: /realms/camunda-platform
          url: {}
        service:
          url: null
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: ""
        tag: null
      imagePullSecrets: []
      imageRegistry: ""
      ingress:
        annotations:
          ingress.kubernetes.io/rewrite-target: /
          nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
        className: traefik
        enabled: false
        host: ""
        pathType: Prefix
        tls:
          enabled: false
          secretName: camunda-platform
      labels:
        app: camunda-platform
      multiregion:
        installationType: normal
        regionId: 0
        regions: 1
      multitenancy:
        enabled: false
      opensearch:
        auth:
          existingSecret: null
          existingSecretKey: null
          password: null
          username: null
        aws:
          enabled: false
        enabled: false
        tls:
          enabled: false
          existingSecret: null
        url:
          host: null
          port: 443
          protocol: https
      secrets:
        annotations:
          helm.sh/hook: pre-install
          helm.sh/resource-policy: keep
        autoGenerated: false
        name: camunda-credentials-autogen
      storageClass: ""
      testDeprecationFlags:
        existingSecretsMustBeSet: ignore
      zeebeClusterName: '{{ .Release.Name }}-zeebe'
  commonAnnotations: {}
  commonLabels: {}
  configuration: ""
  containerPorts:
    http: 8080
    https: 8443
    infinispan: 7800
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    privileged: false
    readOnlyRootFilesystem: true
    runAsGroup: 0
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: null
    seccompProfile:
      type: RuntimeDefault
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  dnsConfig: {}
  dnsPolicy: ""
  enableDefaultInitContainers: true
  enableServiceLinks: true
  enabled: true
  existingConfigmap: ""
  externalDatabase:
    annotations: {}
    database: bitnami_keycloak
    existingSecret: ""
    existingSecretDatabaseKey: ""
    existingSecretHostKey: ""
    existingSecretPasswordKey: ""
    existingSecretPortKey: ""
    existingSecretUserKey: ""
    host: ""
    password: ""
    port: 5432
    user: bn_keycloak
  extraContainerPorts: []
  extraDeploy: []
  extraEnvVars:
  - name: KEYCLOAK_PROXY_ADDRESS_FORWARDING
    value: '{{ .Values.global.ingress.tls.enabled }}'
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraStartupArgs: ""
  extraVolumeMounts:
  - mountPath: /opt/bitnami/keycloak/themes/identity
    name: camunda-theme
  - mountPath: /opt/bitnami/keycloak/data/tmp
    name: data-tmp
  extraVolumes:
  - emptyDir: {}
    name: data-tmp
  - emptyDir:
      sizeLimit: 10Mi
    name: camunda-theme
  fullnameOverride: ""
  global:
    annotations: {}
    compatibility:
      openshift:
        adaptSecurityContext: disabled
    createReleaseInfo: true
    elasticsearch:
      auth:
        existingSecret: null
        existingSecretKey: null
        password: null
        username: null
      clusterName: elasticsearch
      disableExporter: false
      enabled: true
      external: false
      prefix: zeebe-record
      tls:
        enabled: false
        existingSecret: null
      url:
        host: '{{ .Release.Name }}-elasticsearch'
        port: 9200
        protocol: http
    identity:
      auth:
        connectors:
          clientId: connectors
          existingSecret: null
          existingSecretKey: connectors-secret
        console:
          audience: console-api
          clientId: console
          existingSecret: null
          existingSecretKey: console-secret
          redirectUrl: http://localhost:8080
          wellKnown: https://well-known-uri
        enabled: true
        identity:
          audience: camunda-identity-resource-server
          clientId: camunda-identity
          existingSecret: null
          existingSecretKey: identity-secret
          initialClaimName: oid
          initialClaimValue: null
          redirectUrl: http://localhost:8085
        issuer: ""
        issuerBackendUrl: ""
        jwksUrl: ""
        operate:
          audience: operate-api
          clientId: operate
          existingSecret: null
          existingSecretKey: operate-secret
          redirectUrl: http://localhost:8081
        optimize:
          audience: optimize-api
          clientId: optimize
          existingSecret: null
          existingSecretKey: optimize-secret
          redirectUrl: http://localhost:8083
        publicIssuerUrl: http://localhost:18080/auth/realms/camunda-platform
        tasklist:
          audience: tasklist-api
          clientId: tasklist
          existingSecret: null
          existingSecretKey: tasklist-secret
          redirectUrl: http://localhost:8082
        tokenUrl: ""
        type: KEYCLOAK
        webModeler:
          clientApiAudience: web-modeler-api
          clientId: web-modeler
          publicApiAudience: web-modeler-public-api
          redirectUrl: http://localhost:8084
        zeebe:
          audience: zeebe-api
          clientId: zeebe
          existingSecret: null
          existingSecretKey: zeebe-secret
          tokenScope: null
      image:
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: camunda/identity
        tag: 8.5.11
      keycloak:
        auth: {}
        contextPath: /auth
        internal: false
        realm: /realms/camunda-platform
        url: {}
      service:
        url: null
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: ""
      tag: null
    imagePullSecrets: []
    imageRegistry: ""
    ingress:
      annotations:
        ingress.kubernetes.io/rewrite-target: /
        nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
        nginx.ingress.kubernetes.io/proxy-buffering: "on"
        nginx.ingress.kubernetes.io/ssl-redirect: "false"
      className: traefik
      enabled: false
      host: ""
      pathType: Prefix
      tls:
        enabled: false
        secretName: camunda-platform
    labels:
      app: camunda-platform
    multiregion:
      installationType: normal
      regionId: 0
      regions: 1
    multitenancy:
      enabled: false
    opensearch:
      auth:
        existingSecret: null
        existingSecretKey: null
        password: null
        username: null
      aws:
        enabled: false
      enabled: false
      tls:
        enabled: false
        existingSecret: null
      url:
        host: null
        port: 443
        protocol: https
    secrets:
      annotations:
        helm.sh/hook: pre-install
        helm.sh/resource-policy: keep
      autoGenerated: false
      name: camunda-credentials-autogen
    storageClass: ""
    testDeprecationFlags:
      existingSecretsMustBeSet: ignore
    zeebeClusterName: '{{ .Release.Name }}-zeebe'
  hostAliases: []
  httpRelativePath: /auth/
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/keycloak
    tag: 23.0.7
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
    apiVersion: ""
    enabled: true
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []
    hostname: cp-keycloak.k8s.orb.local
    ingressClassName: ""
    labels: {}
    path: '{{ .Values.httpRelativePath }}'
    pathType: Prefix
    secrets: []
    selfSigned: false
    servicePort: http
    tls: false
  initContainers:
  - command:
    - sh
    - -c
    - cp -a /app/keycloak-theme/* /mnt
    image: '{{ .Values.global.identity.image.registry }}/{{ .Values.global.identity.image.repository
      }}:{{ .Values.global.identity.image.tag }}'
    imagePullPolicy: '{{ .Values.global.identity.image.pullPolicy | default "Always"
      }}'
    name: copy-camunda-theme
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      privileged: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 1001
      seccompProfile:
        type: RuntimeDefault
    volumeMounts:
    - mountPath: /mnt
      name: camunda-theme
  initdbScripts: {}
  initdbScriptsConfigMap: ""
  keycloakConfigCli:
    annotations:
      helm.sh/hook: post-install,post-upgrade,post-rollback
      helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
      helm.sh/hook-weight: "5"
    args: []
    automountServiceAccountToken: true
    backoffLimit: 1
    cleanupAfterFinished:
      enabled: false
      seconds: 600
    command: []
    configuration: {}
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: false
      runAsGroup: 0
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: null
      seccompProfile:
        type: RuntimeDefault
    enabled: false
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/keycloak-config-cli
      tag: 5.11.1-debian-12-r0
    initContainers: []
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    podTolerations: []
    resources: {}
    resourcesPreset: none
    sidecars: []
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 300
    periodSeconds: 1
    successThreshold: 1
    timeoutSeconds: 5
  logging:
    level: INFO
    output: default
  metrics:
    enabled: false
    prometheusRule:
      enabled: false
      groups: []
      labels: {}
      namespace: ""
    service:
      annotations:
        prometheus.io/port: '{{ .Values.metrics.service.ports.http }}'
        prometheus.io/scrape: "true"
      extraPorts: []
      ports:
        http: 8080
    serviceMonitor:
      enabled: false
      endpoints:
      - path: '{{ include "keycloak.httpPath" . }}metrics'
      - path: '{{ include "keycloak.httpPath" . }}realms/master/metrics'
      honorLabels: false
      interval: 30s
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      path: ""
      port: http
      relabelings: []
      scrapeTimeout: ""
      selector: {}
  nameOverride: keycloak
  namespaceOverride: ""
  networkPolicy:
    allowExternal: true
    allowExternalEgress: true
    enabled: true
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
    kubeAPIServerPorts:
    - 443
    - 6443
    - 8443
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: Parallel
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    fsGroupChangePolicy: Always
    runAsNonRoot: true
    supplementalGroups: []
    sysctls: []
  postgresql:
    architecture: standalone
    audit:
      clientMinMessages: error
      logConnections: false
      logDisconnections: false
      logHostname: false
      logLinePrefix: ""
      logTimezone: ""
      pgAuditLog: ""
      pgAuditLogCatalog: "off"
    auth:
      database: bitnami_keycloak
      enablePostgresUser: true
      existingSecret: ""
      password: ""
      postgresPassword: ""
      replicationPassword: ""
      replicationUsername: repl_user
      secretKeys:
        adminPasswordKey: postgres-password
        replicationPasswordKey: replication-password
        userPasswordKey: password
      usePasswordFiles: false
      username: bn_keycloak
    backup:
      cronjob:
        annotations: {}
        command:
        - /bin/sh
        - -c
        - pg_dumpall --clean --if-exists --load-via-partition-root --quote-all-identifiers
          --no-password --file=${PGDUMP_DIR}/pg_dumpall-$(date '+%Y-%m-%d-%H-%M').pgdump
        concurrencyPolicy: Allow
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          enabled: true
          privileged: false
          readOnlyRootFilesystem: false
          runAsGroup: 0
          runAsNonRoot: true
          runAsUser: 1001
          seLinuxOptions: null
          seccompProfile:
            type: RuntimeDefault
        failedJobsHistoryLimit: 1
        labels: {}
        nodeSelector: {}
        podSecurityContext:
          enabled: true
          fsGroup: 1001
          fsGroupChangePolicy: Always
          supplementalGroups: []
          sysctls: []
        resources: {}
        resourcesPreset: none
        restartPolicy: OnFailure
        schedule: '@daily'
        startingDeadlineSeconds: ""
        storage:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          existingClaim: ""
          mountPath: /backup/pgdump
          resourcePolicy: ""
          size: 8Gi
          storageClass: ""
          subPath: ""
          volumeClaimTemplates:
            selector: {}
        successfulJobsHistoryLimit: 3
        timeZone: ""
        ttlSecondsAfterFinished: ""
      enabled: false
    clusterDomain: cluster.local
    common:
      exampleValue: common-chart
      global:
        annotations: {}
        compatibility:
          openshift:
            adaptSecurityContext: disabled
        createReleaseInfo: true
        elasticsearch:
          auth:
            existingSecret: null
            existingSecretKey: null
            password: null
            username: null
          clusterName: elasticsearch
          disableExporter: false
          enabled: true
          external: false
          prefix: zeebe-record
          tls:
            enabled: false
            existingSecret: null
          url:
            host: '{{ .Release.Name }}-elasticsearch'
            port: 9200
            protocol: http
        identity:
          auth:
            connectors:
              clientId: connectors
              existingSecret: null
              existingSecretKey: connectors-secret
            console:
              audience: console-api
              clientId: console
              existingSecret: null
              existingSecretKey: console-secret
              redirectUrl: http://localhost:8080
              wellKnown: https://well-known-uri
            enabled: true
            identity:
              audience: camunda-identity-resource-server
              clientId: camunda-identity
              existingSecret: null
              existingSecretKey: identity-secret
              initialClaimName: oid
              initialClaimValue: null
              redirectUrl: http://localhost:8085
            issuer: ""
            issuerBackendUrl: ""
            jwksUrl: ""
            operate:
              audience: operate-api
              clientId: operate
              existingSecret: null
              existingSecretKey: operate-secret
              redirectUrl: http://localhost:8081
            optimize:
              audience: optimize-api
              clientId: optimize
              existingSecret: null
              existingSecretKey: optimize-secret
              redirectUrl: http://localhost:8083
            publicIssuerUrl: http://localhost:18080/auth/realms/camunda-platform
            tasklist:
              audience: tasklist-api
              clientId: tasklist
              existingSecret: null
              existingSecretKey: tasklist-secret
              redirectUrl: http://localhost:8082
            tokenUrl: ""
            type: KEYCLOAK
            webModeler:
              clientApiAudience: web-modeler-api
              clientId: web-modeler
              publicApiAudience: web-modeler-public-api
              redirectUrl: http://localhost:8084
            zeebe:
              audience: zeebe-api
              clientId: zeebe
              existingSecret: null
              existingSecretKey: zeebe-secret
              tokenScope: null
          image:
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: camunda/identity
            tag: 8.5.11
          keycloak:
            auth: {}
            contextPath: /auth
            internal: false
            realm: /realms/camunda-platform
            url: {}
          service:
            url: null
        image:
          pullPolicy: IfNotPresent
          pullSecrets: []
          registry: ""
          tag: null
        imagePullSecrets: []
        imageRegistry: ""
        ingress:
          annotations:
            ingress.kubernetes.io/rewrite-target: /
            nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
            nginx.ingress.kubernetes.io/proxy-buffering: "on"
            nginx.ingress.kubernetes.io/ssl-redirect: "false"
          className: traefik
          enabled: false
          host: ""
          pathType: Prefix
          tls:
            enabled: false
            secretName: camunda-platform
        labels:
          app: camunda-platform
        multiregion:
          installationType: normal
          regionId: 0
          regions: 1
        multitenancy:
          enabled: false
        opensearch:
          auth:
            existingSecret: null
            existingSecretKey: null
            password: null
            username: null
          aws:
            enabled: false
          enabled: false
          tls:
            enabled: false
            existingSecret: null
          url:
            host: null
            port: 443
            protocol: https
        postgresql:
          auth:
            database: ""
            existingSecret: ""
            password: ""
            postgresPassword: ""
            secretKeys:
              adminPasswordKey: ""
              replicationPasswordKey: ""
              userPasswordKey: ""
            username: ""
          service:
            ports:
              postgresql: ""
        secrets:
          annotations:
            helm.sh/hook: pre-install
            helm.sh/resource-policy: keep
          autoGenerated: false
          name: camunda-credentials-autogen
        storageClass: ""
        testDeprecationFlags:
          existingSecretsMustBeSet: ignore
        zeebeClusterName: '{{ .Release.Name }}-zeebe'
    commonAnnotations: {}
    commonLabels: {}
    containerPorts:
      postgresql: 5432
    diagnosticMode:
      args:
      - infinity
      command:
      - sleep
      enabled: false
    enabled: true
    extraDeploy: []
    fullnameOverride: ""
    global:
      annotations: {}
      compatibility:
        openshift:
          adaptSecurityContext: disabled
      createReleaseInfo: true
      elasticsearch:
        auth:
          existingSecret: null
          existingSecretKey: null
          password: null
          username: null
        clusterName: elasticsearch
        disableExporter: false
        enabled: true
        external: false
        prefix: zeebe-record
        tls:
          enabled: false
          existingSecret: null
        url:
          host: '{{ .Release.Name }}-elasticsearch'
          port: 9200
          protocol: http
      identity:
        auth:
          connectors:
            clientId: connectors
            existingSecret: null
            existingSecretKey: connectors-secret
          console:
            audience: console-api
            clientId: console
            existingSecret: null
            existingSecretKey: console-secret
            redirectUrl: http://localhost:8080
            wellKnown: https://well-known-uri
          enabled: true
          identity:
            audience: camunda-identity-resource-server
            clientId: camunda-identity
            existingSecret: null
            existingSecretKey: identity-secret
            initialClaimName: oid
            initialClaimValue: null
            redirectUrl: http://localhost:8085
          issuer: ""
          issuerBackendUrl: ""
          jwksUrl: ""
          operate:
            audience: operate-api
            clientId: operate
            existingSecret: null
            existingSecretKey: operate-secret
            redirectUrl: http://localhost:8081
          optimize:
            audience: optimize-api
            clientId: optimize
            existingSecret: null
            existingSecretKey: optimize-secret
            redirectUrl: http://localhost:8083
          publicIssuerUrl: http://localhost:18080/auth/realms/camunda-platform
          tasklist:
            audience: tasklist-api
            clientId: tasklist
            existingSecret: null
            existingSecretKey: tasklist-secret
            redirectUrl: http://localhost:8082
          tokenUrl: ""
          type: KEYCLOAK
          webModeler:
            clientApiAudience: web-modeler-api
            clientId: web-modeler
            publicApiAudience: web-modeler-public-api
            redirectUrl: http://localhost:8084
          zeebe:
            audience: zeebe-api
            clientId: zeebe
            existingSecret: null
            existingSecretKey: zeebe-secret
            tokenScope: null
        image:
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: camunda/identity
          tag: 8.5.11
        keycloak:
          auth: {}
          contextPath: /auth
          internal: false
          realm: /realms/camunda-platform
          url: {}
        service:
          url: null
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: ""
        tag: null
      imagePullSecrets: []
      imageRegistry: ""
      ingress:
        annotations:
          ingress.kubernetes.io/rewrite-target: /
          nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
        className: traefik
        enabled: false
        host: ""
        pathType: Prefix
        tls:
          enabled: false
          secretName: camunda-platform
      labels:
        app: camunda-platform
      multiregion:
        installationType: normal
        regionId: 0
        regions: 1
      multitenancy:
        enabled: false
      opensearch:
        auth:
          existingSecret: null
          existingSecretKey: null
          password: null
          username: null
        aws:
          enabled: false
        enabled: false
        tls:
          enabled: false
          existingSecret: null
        url:
          host: null
          port: 443
          protocol: https
      postgresql:
        auth:
          database: ""
          existingSecret: ""
          password: ""
          postgresPassword: ""
          secretKeys:
            adminPasswordKey: ""
            replicationPasswordKey: ""
            userPasswordKey: ""
          username: ""
        service:
          ports:
            postgresql: ""
      secrets:
        annotations:
          helm.sh/hook: pre-install
          helm.sh/resource-policy: keep
        autoGenerated: false
        name: camunda-credentials-autogen
      storageClass: ""
      testDeprecationFlags:
        existingSecretsMustBeSet: ignore
      zeebeClusterName: '{{ .Release.Name }}-zeebe'
    image:
      debug: false
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/postgresql
      tag: 15.10.0-debian-12-r2
    kubeVersion: ""
    ldap:
      basedn: ""
      binddn: ""
      bindpw: ""
      enabled: false
      port: ""
      prefix: ""
      scheme: ""
      searchAttribute: ""
      searchFilter: ""
      server: ""
      suffix: ""
      tls:
        enabled: false
      uri: ""
    metrics:
      collectors: {}
      containerPorts:
        metrics: 9187
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        enabled: true
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions: null
        seccompProfile:
          type: RuntimeDefault
      customLivenessProbe: {}
      customMetrics: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      extraEnvVars: []
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/postgres-exporter
        tag: 0.15.0-debian-12-r14
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      prometheusRule:
        enabled: false
        labels: {}
        namespace: ""
        rules: []
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      resourcesPreset: none
      service:
        annotations:
          prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
          prometheus.io/scrape: "true"
        clusterIP: ""
        ports:
          metrics: 9187
        sessionAffinity: None
      serviceMonitor:
        enabled: false
        honorLabels: false
        interval: ""
        jobLabel: ""
        labels: {}
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
        selector: {}
      startupProbe:
        enabled: false
        failureThreshold: 15
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
    nameOverride: ""
    postgresqlDataDir: /bitnami/postgresql/data
    postgresqlSharedPreloadLibraries: pgaudit
    primary:
      affinity: {}
      annotations: {}
      args: []
      automountServiceAccountToken: false
      command: []
      configuration: ""
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        enabled: true
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions: null
        seccompProfile:
          type: RuntimeDefault
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      existingConfigmap: ""
      existingExtendedConfigmap: ""
      extendedConfiguration: ""
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraPodSpec: {}
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      hostIPC: false
      hostNetwork: false
      initContainers: []
      initdb:
        args: ""
        password: ""
        postgresqlWalDir: ""
        scripts: {}
        scriptsConfigMap: ""
        scriptsSecret: ""
        user: ""
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: primary
      networkPolicy:
        allowExternal: true
        allowExternalEgress: true
        enabled: true
        extraEgress: []
        extraIngress: []
        ingressNSMatchLabels: {}
        ingressNSPodMatchLabels: {}
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        dataSource: {}
        enabled: true
        existingClaim: ""
        labels: {}
        mountPath: /bitnami/postgresql
        selector: {}
        size: 8Gi
        storageClass: ""
        subPath: ""
      persistentVolumeClaimRetentionPolicy:
        enabled: false
        whenDeleted: Retain
        whenScaled: Retain
      pgHbaConfiguration: ""
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        fsGroupChangePolicy: Always
        runAsNonRoot: true
        supplementalGroups: []
        sysctls: []
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      resourcesPreset: none
      schedulerName: ""
      service:
        annotations: {}
        clusterIP: ""
        externalTrafficPolicy: Cluster
        extraPorts: []
        headless:
          annotations: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        nodePorts:
          postgresql: ""
        ports:
          postgresql: 5432
        sessionAffinity: None
        sessionAffinityConfig: {}
        type: ClusterIP
      sidecars: []
      standby:
        enabled: false
        primaryHost: ""
        primaryPort: ""
      startupProbe:
        enabled: false
        failureThreshold: 15
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        rollingUpdate: {}
        type: RollingUpdate
    psp:
      create: false
    rbac:
      create: false
      rules: []
    readReplicas:
      affinity: {}
      annotations: {}
      args: []
      automountServiceAccountToken: false
      command: []
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        enabled: true
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions: null
        seccompProfile:
          type: RuntimeDefault
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      extendedConfiguration: ""
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraPodSpec: {}
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      hostIPC: false
      hostNetwork: false
      initContainers: []
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: read
      networkPolicy:
        allowExternal: true
        allowExternalEgress: true
        enabled: true
        extraEgress: []
        extraIngress: []
        ingressNSMatchLabels: {}
        ingressNSPodMatchLabels: {}
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        dataSource: {}
        enabled: true
        existingClaim: ""
        labels: {}
        mountPath: /bitnami/postgresql
        selector: {}
        size: 8Gi
        storageClass: ""
        subPath: ""
      persistentVolumeClaimRetentionPolicy:
        enabled: false
        whenDeleted: Retain
        whenScaled: Retain
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      replicaCount: 1
      resources: {}
      resourcesPreset: none
      schedulerName: ""
      service:
        annotations: {}
        clusterIP: ""
        externalTrafficPolicy: Cluster
        extraPorts: []
        headless:
          annotations: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        nodePorts:
          postgresql: ""
        ports:
          postgresql: 5432
        sessionAffinity: None
        sessionAffinityConfig: {}
        type: ClusterIP
      sidecars: []
      startupProbe:
        enabled: false
        failureThreshold: 15
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        rollingUpdate: {}
        type: RollingUpdate
    replication:
      applicationName: my_application
      numSynchronousReplicas: 0
      synchronousCommit: "off"
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      name: ""
    serviceBindings:
      enabled: false
    shmVolume:
      enabled: true
      sizeLimit: ""
    tls:
      autoGenerated: false
      certCAFilename: ""
      certFilename: ""
      certKeyFilename: ""
      certificatesSecret: ""
      crlFilename: ""
      enabled: false
      preferServerCiphers: true
    volumePermissions:
      containerSecurityContext:
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
        seLinuxOptions: null
        seccompProfile:
          type: RuntimeDefault
      enabled: false
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/os-shell
        tag: 12-debian-12-r16
      resources: {}
      resourcesPreset: none
  priorityClassName: ""
  production: false
  proxy: edge
  rbac:
    create: false
    rules: []
  readinessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources: {}
  resourcesPreset: none
  revisionHistoryLimitCount: 10
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraHeadlessPorts: []
    extraPorts: []
    headless:
      annotations: {}
      extraPorts: []
    http:
      enabled: true
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      http: ""
      https: ""
    ports:
      http: 80
      https: 443
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    create: true
    extraLabels: {}
    name: ""
  sidecars: []
  spi:
    existingSecret: ""
    hostnameVerificationPolicy: ""
    passwordsSecret: ""
    truststoreFilename: keycloak-spi.truststore.jks
    truststorePassword: ""
  startupProbe:
    enabled: false
    failureThreshold: 60
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  statefulsetAnnotations: {}
  terminationGracePeriodSeconds: ""
  tls:
    autoGenerated: false
    enabled: false
    existingSecret: ""
    keystoreFilename: keycloak.keystore.jks
    keystorePassword: ""
    passwordsSecret: ""
    truststoreFilename: keycloak.truststore.jks
    truststorePassword: ""
    usePem: false
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
identityPostgresql:
  auth:
    database: identity
    existingSecret: null
    password: null
    username: identity
  enabled: false
  image:
    repository: bitnami/postgresql
    tag: 15.10.0-debian-12-r2
  nameOverride: identity-postgresql
operate:
  affinity: {}
  command: []
  configMap:
    defaultMode: 484
  configuration: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
    seccompProfile:
      type: RuntimeDefault
  contextPath: ""
  dnsConfig: {}
  dnsPolicy: ""
  enabled: true
  env:
  - name: CAMUNDA_OPERATE_BACKUP_REPOSITORY_NAME
    value: operate-backup
  envFrom: []
  extraConfiguration: {}
  extraVolumeMounts: []
  extraVolumes: []
  image:
    pullSecrets: []
    registry: ""
    repository: camunda/operate
    tag: 8.5.10
  ingress:
    annotations:
      ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    className: traefik
    enabled: true
    host: cp-operate.k8s.orb.local
    path: /
    pathType: Prefix
    tls:
      enabled: false
      secretName: camunda-platform-operate
  initContainers: []
  livenessProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health/liveness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  logging:
    level:
      ROOT: INFO
      io.camunda.operate: INFO
  metrics:
    prometheus: /actuator/prometheus
  migration:
    enabled: true
    env: []
    resources:
      limits:
        cpu: 2000m
        memory: 2Gi
      requests:
        cpu: 600m
        memory: 1Gi
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 1001
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health/readiness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 600m
      memory: 400Mi
  retention:
    enabled: false
    minimumAge: 30d
  service:
    annotations: {}
    port: 80
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    enabled: true
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health/readiness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []
optimize:
  affinity: {}
  command: []
  configMap:
    defaultMode: 492
  configuration: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
    seccompProfile:
      type: RuntimeDefault
  contextPath: ""
  dnsConfig: {}
  dnsPolicy: ""
  enabled: true
  env:
  - name: CAMUNDA_OPTIMIZE_BACKUP_REPOSITORY_NAME
    value: optimize-backup
  envFrom: []
  extraConfiguration: {}
  extraVolumeMounts: []
  extraVolumes: []
  image:
    pullSecrets: []
    registry: ""
    repository: camunda/optimize
    tag: 8.5.10
  ingress:
    annotations:
      ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    className: traefik
    enabled: false
    host: ""
    path: /
    pathType: Prefix
    tls:
      enabled: false
      secretName: camunda-platform-optimize
  initContainers: []
  livenessProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /api/readyz
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  metrics:
    prometheus: /actuator/prometheus
  migration:
    enabled: true
    env: []
    resources:
      limits:
        cpu: 2000m
        memory: 2Gi
      requests:
        cpu: 600m
        memory: 1Gi
  nodeSelector: {}
  partitionCount: "3"
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 1001
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /api/readyz
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 600m
      memory: 1Gi
  service:
    annotations: {}
    managementPort: 8092
    port: 80
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    enabled: true
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /api/readyz
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []
postgresql:
  auth:
    database: web-modeler
    existingSecret: ""
    password: ""
    username: web-modeler
  enabled: false
  image:
    repository: bitnami/postgresql
    tag: 14.15.0-debian-12-r8
  nameOverride: postgresql-web-modeler
  primary:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 1001
      seccompProfile:
        type: RuntimeDefault
    extraVolumeMounts:
    - mountPath: /tmp
      name: tmp
    - mountPath: /opt/bitnami/postgresql/conf
      name: config
    - mountPath: /opt/bitnami/postgresql/tmp
      name: postgresql-tmp
    extraVolumes:
    - emptyDir: {}
      name: tmp
    - emptyDir: {}
      name: config
    - emptyDir: {}
      name: postgresql-tmp
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      runAsNonRoot: true
prometheusServiceMonitor:
  enabled: true
  labels:
    release: prometheus
  scrapeInterval: 10s
tasklist:
  affinity: {}
  command: []
  configMap:
    defaultMode: 484
  configuration: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
    seccompProfile:
      type: RuntimeDefault
  contextPath: ""
  dnsConfig: {}
  dnsPolicy: ""
  enabled: true
  env:
  - name: CAMUNDA_TASKLIST_BACKUP_REPOSITORY_NAME
    value: tasklist-backup
  envFrom: []
  extraConfiguration: {}
  extraVolumeMounts: []
  extraVolumes: []
  identity:
    userAccessRestrictions:
      enabled: true
  image:
    pullSecrets: []
    registry: ""
    repository: camunda/tasklist
    tag: 8.5.11
  ingress:
    annotations:
      ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    className: traefik
    enabled: false
    host: ""
    path: /
    pathType: Prefix
    tls:
      enabled: false
      secretName: camunda-platform-tasklist
  initContainers: []
  livenessProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health/liveness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  metrics:
    prometheus: /actuator/prometheus
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 1001
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health/readiness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 400m
      memory: 1Gi
  retention:
    enabled: false
    minimumAge: 30d
  service:
    annotations: {}
    port: 80
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    enabled: true
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health/readiness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []
webModeler:
  contextPath: ""
  enabled: false
  fullnameOverride: ""
  image:
    pullSecrets: []
    registry: registry.camunda.cloud
    tag: 8.5.14
  ingress:
    annotations:
      ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    className: traefik
    enabled: false
    webapp:
      host: ""
      pathType: Prefix
      tls:
        enabled: false
        secretName: camunda-platform-webmodeler-webapp
    websockets:
      host: ""
      pathType: Prefix
      tls:
        enabled: false
        secretName: camunda-platform-webmodeler-websockets
  nameOverride: ""
  restapi:
    affinity: {}
    command: []
    configuration: ""
    containerSecurityContext:
      allowPrivilegeEscalation: false
      privileged: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 1001
      seccompProfile:
        type: RuntimeDefault
    dnsConfig: {}
    dnsPolicy: ""
    env: []
    envFrom: []
    externalDatabase:
      existingSecret: null
      existingSecretPasswordKey: ""
      password: ""
      url: ""
      user: ""
    extraConfiguration: {}
    extraVolumeMounts: []
    extraVolumes: []
    image:
      repository: web-modeler-ee/modeler-restapi
    initContainers: []
    livenessProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 30
      probePath: /health/liveness
      scheme: HTTP
      successThreshold: 1
      timeoutSeconds: 1
    mail:
      existingSecret: null
      existingSecretPasswordKey: ""
      fromAddress: ""
      fromName: Camunda 8
      smtpHost: ""
      smtpPassword: ""
      smtpPort: 587
      smtpTlsEnabled: true
      smtpUser: ""
    metrics:
      prometheus: /metrics
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    podSecurityContext:
      fsGroup: 1001
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 30
      probePath: /health/readiness
      scheme: HTTP
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    service:
      annotations: {}
      managementPort: 8091
      port: 80
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 30
      probePath: /health/liveness
      scheme: HTTP
      successThreshold: 1
      timeoutSeconds: 1
    tolerations: []
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    enabled: true
    name: ""
  webapp:
    affinity: {}
    command: []
    configuration: ""
    containerSecurityContext:
      allowPrivilegeEscalation: false
      privileged: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 1001
      seccompProfile:
        type: RuntimeDefault
    dnsConfig: {}
    dnsPolicy: ""
    env: []
    envFrom: []
    extraConfiguration: {}
    extraVolumeMounts: []
    extraVolumes: []
    image:
      repository: web-modeler-ee/modeler-webapp
    initContainers: []
    livenessProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 15
      periodSeconds: 30
      probePath: /health/liveness
      scheme: HTTP
      successThreshold: 1
      timeoutSeconds: 1
    metrics:
      prometheus: /metrics
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    podSecurityContext:
      fsGroup: 1001
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 15
      periodSeconds: 30
      probePath: /health/readiness
      scheme: HTTP
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits:
        cpu: 800m
        memory: 512Mi
      requests:
        cpu: 400m
        memory: 256Mi
    service:
      annotations: {}
      managementPort: 8071
      port: 80
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 15
      periodSeconds: 30
      probePath: /health/liveness
      scheme: HTTP
      successThreshold: 1
      timeoutSeconds: 1
    tolerations: []
  websockets:
    affinity: {}
    command: []
    configuration: ""
    containerSecurityContext:
      allowPrivilegeEscalation: false
      privileged: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 1001
      seccompProfile:
        type: RuntimeDefault
    dnsConfig: {}
    dnsPolicy: ""
    env: []
    envFrom: []
    extraConfiguration: {}
    extraVolumeMounts: []
    extraVolumes: []
    image:
      repository: web-modeler-ee/modeler-websockets
    initContainers: []
    livenessProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 30
      probePath: /up
      scheme: HTTP
      successThreshold: 1
      timeoutSeconds: 1
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    podSecurityContext:
      fsGroup: 1001
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    publicHost: localhost
    publicPort: 8085
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 30
      probePath: /up
      scheme: HTTP
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits:
        cpu: 200m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 64Mi
    service:
      annotations: {}
      port: 80
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 30
      probePath: /up
      scheme: HTTP
      successThreshold: 1
      timeoutSeconds: 1
    tolerations: []
zeebe:
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/component
            operator: In
            values:
            - zeebe-broker
        topologyKey: kubernetes.io/hostname
  clusterSize: "3"
  command: []
  configMap:
    defaultMode: 492
  configuration: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
    seccompProfile:
      type: RuntimeDefault
  cpuThreadCount: "3"
  debug: false
  dnsConfig: {}
  dnsPolicy: ""
  enabled: true
  env:
  - name: ZEEBE_BROKER_DATA_BACKUP_STORE
    value: S3
  - name: ZEEBE_BROKER_DATA_BACKUP_S3_BUCKETNAME
    value: zeebe-backup
  - name: ZEEBE_BROKER_DATA_BACKUP_S3_FORCEPATHSTYLEACCESS
    value: "true"
  - name: ZEEBE_BROKER_DATA_BACKUP_S3_ENDPOINT
    value: http://minio:9000
  - name: ZEEBE_BROKER_DATA_BACKUP_S3_ACCESSKEY
    value: minioadmin
  - name: ZEEBE_BROKER_DATA_BACKUP_S3_SECRETKEY
    value: minioadmin
  - name: ZEEBE_BROKER_DATA_BACKUP_S3_REGION
    value: us-east-1
  envFrom: []
  extraConfiguration: {}
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    pullSecrets: []
    registry: ""
    repository: camunda/zeebe
    tag: 8.5.12
  initContainers: []
  ioThreadCount: "3"
  javaOpts: -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/zeebe/data
    -XX:ErrorFile=/usr/local/zeebe/data/zeebe_error%p.log -XX:+ExitOnOutOfMemoryError
  livenessProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health/readiness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  log4j2: ""
  logLevel: info
  metrics:
    prometheus: /actuator/prometheus
  nodeSelector: {}
  partitionCount: "3"
  persistenceType: disk
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
    minAvailable: null
  podLabels: {}
  podSecurityContext:
    fsGroup: 1001
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  priorityClassName: ""
  pvcAccessModes:
  - ReadWriteOnce
  pvcAnnotations: {}
  pvcSelector: {}
  pvcSize: 32Gi
  pvcStorageClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health/readiness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  replicationFactor: "3"
  resources:
    limits:
      cpu: 960m
      memory: 1920Mi
    requests:
      cpu: 800m
      memory: 1200Mi
  retention:
    enabled: false
    minimumAge: 30d
    policyName: zeebe-record-retention-policy
  service:
    annotations: {}
    commandName: command
    commandPort: 26501
    extraPorts: []
    httpName: http
    httpPort: 9600
    internalName: internal
    internalPort: 26502
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    enabled: true
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health/startup
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []
zeebe-gateway:
  env:
  - name: ZEEBE_GATEWAY_SECURITY_AUTHENTICATION_MODE
    value: none
  replicas: 1
zeebeGateway:
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/component
            operator: In
            values:
            - zeebe-gateway
        topologyKey: kubernetes.io/hostname
  command: []
  configMap:
    defaultMode: 484
  configuration: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
    seccompProfile:
      type: RuntimeDefault
  contextPath: ""
  dnsConfig: {}
  dnsPolicy: ""
  env: []
  envFrom: []
  extraConfiguration: {}
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    pullSecrets: []
    registry: ""
    repository: camunda/zeebe
    tag: 8.5.12
  ingress:
    grpc:
      annotations:
        ingress.kubernetes.io/rewrite-target: /
        nginx.ingress.kubernetes.io/backend-protocol: GRPC
        nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
        nginx.ingress.kubernetes.io/ssl-redirect: "false"
      className: traefik
      enabled: false
      host: "cp-zeebegateway.k8s.orb.local"
      path: /
      pathType: Prefix
      tls:
        enabled: false
        secretName: camunda-platform-zeebe-gateway-grpc
    rest:
      annotations:
        ingress.kubernetes.io/rewrite-target: /
        nginx.ingress.kubernetes.io/backend-protocol: HTTP
        nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
        nginx.ingress.kubernetes.io/proxy-buffering: "on"
        nginx.ingress.kubernetes.io/ssl-redirect: "false"
      className: traefik
      enabled: false
      host: ""
      path: /
      pathType: Prefix
      tls:
        enabled: false
        secretName: camunda-platform-zeebe-gateway-rest
  initContainers: []
  javaOpts: -XX:+ExitOnOutOfMemoryError
  livenessProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health/liveness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  log4j2: ""
  logLevel: info
  metrics:
    prometheus: /actuator/prometheus
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: null
    minAvailable: 1
  podLabels: {}
  podSecurityContext:
    fsGroup: 1001
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health/readiness
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  replicas: 2
  resources:
    limits:
      cpu: 400m
      memory: 450Mi
    requests:
      cpu: 400m
      memory: 450Mi
  service:
    annotations: {}
    grpcName: gateway
    grpcPort: 26500
    httpName: http
    httpPort: 9600
    internalName: internal
    internalPort: 26502
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    restName: rest
    restPort: 8080
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    enabled: true
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    probePath: /actuator/health/startup
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []

#HOOKS:
#---
## Source: camunda-platform/templates/identity/tests/test-connection.yaml
#apiVersion: v1
#kind: Pod
#metadata:
#  name: "camunda-identity-test-connection"
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: identity
#    app.kubernetes.io/version: "8.5.11"
#  annotations:
#    "helm.sh/hook": test-success
#spec:
#  containers:
#    - name: wget
#      image: busybox
#      command: ['wget']
#      args:  ['camunda-identity:80']
#  restartPolicy: Never
#---
## Source: camunda-platform/templates/operate/tests/test-connection.yaml
#apiVersion: v1
#kind: Pod
#metadata:
#  name: "camunda-operate-test-connection"
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: operate
#    app.kubernetes.io/version: "8.5.10"
#  annotations:
#    "helm.sh/hook": test-success
#spec:
#  containers:
#    - name: wget
#      image: busybox
#      command: ['wget']
#      args:  ['camunda-operate:80']
#  restartPolicy: Never
#MANIFEST:
#---
## Source: camunda-platform/charts/elasticsearch/charts/kibana/templates/networkpolicy.yaml
#kind: NetworkPolicy
#apiVersion: networking.k8s.io/v1
#metadata:
#  name: camunda-kibana
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: kibana
#    app.kubernetes.io/version: 8.12.2
#    helm.sh/chart: kibana-10.13.0
#    app.kubernetes.io/component: server
#spec:
#  podSelector:
#    matchLabels:
#      app.kubernetes.io/instance: camunda
#      app.kubernetes.io/name: kibana
#      app.kubernetes.io/component: server
#  policyTypes:
#    - Ingress
#    - Egress
#  egress:
#    - {}
#  ingress:
#    - ports:
#        - port: 5601
#---
## Source: camunda-platform/charts/elasticsearch/templates/master/networkpolicy.yaml
#kind: NetworkPolicy
#apiVersion: networking.k8s.io/v1
#metadata:
#  name: camunda-elasticsearch-master
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: elasticsearch
#    app.kubernetes.io/version: 8.13.2
#    helm.sh/chart: elasticsearch-20.0.4
#    app.kubernetes.io/component: master
#spec:
#  podSelector:
#    matchLabels:
#      app.kubernetes.io/instance: camunda
#      app.kubernetes.io/name: elasticsearch
#      app.kubernetes.io/component: master
#  policyTypes:
#    - Ingress
#    - Egress
#  egress:
#    - {}
#  ingress:
#    - ports:
#        - port: 9200
#        - port: 9300
#---
## Source: camunda-platform/charts/identityKeycloak/charts/postgresql/templates/primary/networkpolicy.yaml
#kind: NetworkPolicy
#apiVersion: networking.k8s.io/v1
#metadata:
#  name: camunda-postgresql
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: postgresql
#    app.kubernetes.io/version: 16.2.0
#    helm.sh/chart: postgresql-14.3.3
#    app.kubernetes.io/component: primary
#spec:
#  podSelector:
#    matchLabels:
#      app.kubernetes.io/instance: camunda
#      app.kubernetes.io/name: postgresql
#      app.kubernetes.io/component: primary
#  policyTypes:
#    - Ingress
#    - Egress
#  egress:
#    - {}
#  ingress:
#    - ports:
#        - port: 5432
#---
## Source: camunda-platform/charts/identityKeycloak/templates/networkpolicy.yaml
#kind: NetworkPolicy
#apiVersion: networking.k8s.io/v1
#metadata:
#  name: camunda-keycloak
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: keycloak
#    app.kubernetes.io/version: 23.0.7
#    helm.sh/chart: identityKeycloak-19.4.1
#    app.kubernetes.io/component: keycloak
#spec:
#  podSelector:
#    matchLabels:
#      app.kubernetes.io/instance: camunda
#      app.kubernetes.io/name: keycloak
#      app.kubernetes.io/component: keycloak
#  policyTypes:
#    - Ingress
#    - Egress
#  egress:
#    - {}
#  ingress:
#    - ports:
#        - port: 7800
#        - port: 8080
#---
## Source: camunda-platform/charts/elasticsearch/charts/kibana/templates/serviceaccount.yaml
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: camunda-kibana
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: kibana
#    app.kubernetes.io/version: 8.12.2
#    helm.sh/chart: kibana-10.13.0
#automountServiceAccountToken: false
#---
## Source: camunda-platform/charts/elasticsearch/templates/master/serviceaccount.yaml
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: camunda-elasticsearch-master
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: elasticsearch
#    app.kubernetes.io/version: 8.13.2
#    helm.sh/chart: elasticsearch-20.0.4
#    app.kubernetes.io/component: master
#automountServiceAccountToken: false
#---
## Source: camunda-platform/charts/identityKeycloak/charts/postgresql/templates/serviceaccount.yaml
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: camunda-postgresql
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: postgresql
#    app.kubernetes.io/version: 16.2.0
#    helm.sh/chart: postgresql-14.3.3
#automountServiceAccountToken: false
#---
## Source: camunda-platform/charts/identityKeycloak/templates/serviceaccount.yaml
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: camunda-keycloak
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: keycloak
#    app.kubernetes.io/version: 23.0.7
#    helm.sh/chart: identityKeycloak-19.4.1
#    app.kubernetes.io/component: keycloak
#automountServiceAccountToken: false
#---
## Source: camunda-platform/templates/identity/serviceaccount.yaml
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: camunda-identity
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: identity
#    app.kubernetes.io/version: "8.5.11"
#automountServiceAccountToken: true
#---
## Source: camunda-platform/templates/operate/serviceaccount.yaml
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: camunda-operate
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: operate
#    app.kubernetes.io/version: "8.5.10"
#automountServiceAccountToken: false
#---
## Source: camunda-platform/templates/optimize/serviceaccount.yaml
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: camunda-optimize
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: optimize
#    app.kubernetes.io/version: "8.5.10"
#automountServiceAccountToken: false
#---
## Source: camunda-platform/templates/tasklist/serviceaccount.yaml
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: camunda-tasklist
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: tasklist
#    app.kubernetes.io/version: "8.5.11"
#automountServiceAccountToken: false
#---
## Source: camunda-platform/templates/zeebe-gateway/serviceaccount.yaml
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: camunda-zeebe-gateway
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: zeebe-gateway
#    app.kubernetes.io/version: "8.5.12"
#automountServiceAccountToken: false
#---
## Source: camunda-platform/templates/zeebe/serviceaccount.yaml
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: camunda-zeebe
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: zeebe-broker
#    app.kubernetes.io/version: "8.5.12"
#automountServiceAccountToken: false
#---
## Source: camunda-platform/charts/identityKeycloak/charts/postgresql/templates/secrets.yaml
#apiVersion: v1
#kind: Secret
#metadata:
#  name: camunda-postgresql
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: postgresql
#    app.kubernetes.io/version: 16.2.0
#    helm.sh/chart: postgresql-14.3.3
#type: Opaque
#data:
#  postgres-password: "aG04bVBZVXZyMg=="
#  password: "QXVWTUlnV2R3bg=="
#  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
#---
## Source: camunda-platform/charts/identityKeycloak/templates/secrets.yaml
#apiVersion: v1
#kind: Secret
#metadata:
#  name: camunda-keycloak
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: keycloak
#    app.kubernetes.io/version: 23.0.7
#    helm.sh/chart: identityKeycloak-19.4.1
#    app.kubernetes.io/component: keycloak
#type: Opaque
#data:
#  admin-password: "ckdIZFVsbU5ObQ=="
#---
## Source: camunda-platform/templates/camunda/secret-connectors.yaml
#apiVersion: v1
#kind: Secret
#metadata:
#  name: camunda-connectors-identity-secret
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: identity
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: identity-10.4.8
#    app.kubernetes.io/component: identity
#type: Opaque
#data:
#  connectors-secret: "aThrSWZyRE9kZQ=="
#---
## Source: camunda-platform/templates/camunda/secret-console.yaml
#apiVersion: v1
#kind: Secret
#metadata:
#  name: camunda-console-identity-secret
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: identity
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: identity-10.4.8
#    app.kubernetes.io/component: identity
#type: Opaque
#data:
#  console-secret: "RjdzcXZnWVBSRA=="
#---
## Source: camunda-platform/templates/camunda/secret-operate.yaml
#apiVersion: v1
#kind: Secret
#metadata:
#  name: camunda-operate-identity-secret
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: identity
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: identity-10.4.8
#    app.kubernetes.io/component: identity
#type: Opaque
#data:
#  operate-secret: "d0NmemVMUG5KRA=="
#---
## Source: camunda-platform/templates/camunda/secret-optimize.yaml
#apiVersion: v1
#kind: Secret
#metadata:
#  name: camunda-optimize-identity-secret
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: identity
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: identity-10.4.8
#    app.kubernetes.io/component: identity
#type: Opaque
#data:
#  optimize-secret: "bmpmQ1B6eVZheg=="
#---
## Source: camunda-platform/templates/camunda/secret-tasklist.yaml
#apiVersion: v1
#kind: Secret
#metadata:
#  name: camunda-tasklist-identity-secret
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: identity
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: identity-10.4.8
#    app.kubernetes.io/component: identity
#type: Opaque
#data:
#  tasklist-secret: "bnVMQVBVc0pCZA=="
#---
## Source: camunda-platform/templates/camunda/secret-zeebe.yaml
#apiVersion: v1
#kind: Secret
#metadata:
#  name: camunda-zeebe-identity-secret
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: identity
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: identity-10.4.8
#    app.kubernetes.io/component: identity
#type: Opaque
#data:
#  zeebe-secret: "ZTRuZDFXT3ZBUA=="
#---
## Source: camunda-platform/charts/elasticsearch/charts/kibana/templates/configmap.yaml
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: camunda-kibana-conf
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: kibana
#    app.kubernetes.io/version: 8.12.2
#    helm.sh/chart: kibana-10.13.0
#data:
#  kibana.yml: |
#    pid.file: /opt/bitnami/kibana/tmp/kibana.pid
#    server.host: "::"
#    server.port: 5601
#    elasticsearch.hosts: [http://camunda-elasticsearch:9200]
#    server.rewriteBasePath: false
#---
## Source: camunda-platform/charts/elasticsearch/templates/initialization-configmap.yaml
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name:  camunda-elasticsearch-init-scripts
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: elasticsearch
#    app.kubernetes.io/version: 8.13.2
#    helm.sh/chart: elasticsearch-20.0.4
#data:
#    init-keystore.sh: |
#      #!/bin/bash
#      set -e
#    
#      echo "Adding S3 access keys to Elasticsearch keystore..."
#    
#      # Add S3 client default keys to the keystore
#      echo "$S3_SECRET_KEY" | elasticsearch-keystore add -f -x s3.client.default.secret_key
#      echo "$S3_ACCESS_KEY" | elasticsearch-keystore add -f -x s3.client.default.access_key
#---
## Source: camunda-platform/charts/identityKeycloak/templates/configmap-env-vars.yaml
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: camunda-keycloak-env-vars
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: keycloak
#    app.kubernetes.io/version: 23.0.7
#    helm.sh/chart: identityKeycloak-19.4.1
#    app.kubernetes.io/component: keycloak
#data:
#  KEYCLOAK_ADMIN: "admin"
#  KEYCLOAK_HTTP_PORT: "8080"
#  KEYCLOAK_PROXY: "edge"
#  KEYCLOAK_ENABLE_STATISTICS: "false"
#  KEYCLOAK_DATABASE_HOST: "camunda-postgresql"
#  KEYCLOAK_DATABASE_PORT: "5432"
#  KEYCLOAK_DATABASE_NAME: "bitnami_keycloak"
#  KEYCLOAK_DATABASE_USER: "bn_keycloak"
#  KEYCLOAK_PRODUCTION:  "false"
#  KEYCLOAK_ENABLE_HTTPS: "false"
#  KEYCLOAK_CACHE_TYPE: "ispn"
#  KEYCLOAK_CACHE_STACK: "kubernetes"
#  JAVA_OPTS_APPEND: "-Djgroups.dns.query=camunda-keycloak-headless.zeebe.svc.cluster.local"
#  KEYCLOAK_LOG_OUTPUT: "default"
#  KEYCLOAK_LOG_LEVEL: "INFO"
#---
## Source: camunda-platform/templates/camunda/configmap-identity-auth.yaml
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: camunda-camunda-platform-identity-env-vars
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#  annotations:
#    {}
#data:
#  CAMUNDA_IDENTITY_BASEURL: "http://camunda-identity:80"
#  CAMUNDA_IDENTITY_TYPE: "KEYCLOAK"
#  CAMUNDA_IDENTITY_ISSUER: "http://cp-keycloak.k8s.orb.local/auth/realms/camunda-platform"
#  CAMUNDA_IDENTITY_ISSUER_BACKEND_URL: "http://camunda-keycloak:80/auth/realms/camunda-platform"
#---
## Source: camunda-platform/templates/camunda/configmap-release.yaml
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: camunda-camunda-platform-release
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#  annotations:
#    {}
#data:
#  info: |-
#    - name: camunda
#      namespace: zeebe
#      version: 10.4.8
#      components:
#      - name: Keycloak
#        id: keycloak
#        version: 23.0.7
#        url: http://cp-keycloak.k8s.orb.local/auth/
#      - name: Identity
#        id: identity
#        version: 8.5.11
#        url: http://cp-identity.k8s.orb.local
#        readiness: http://camunda-identity.zeebe:82/actuator/health
#        metrics: http://camunda-identity.zeebe:82/actuator/prometheus
#      - name: Operate
#        id: operate
#        version: 8.5.10
#        url: http://cp-operate.k8s.orb.local
#        readiness: http://camunda-operate.zeebe:80/actuator/health/readiness
#        metrics: http://camunda-operate.zeebe:80/actuator/prometheus
#      - name: Optimize
#        id: optimize
#        version: 8.5.10
#        url: http://localhost:8083
#        readiness: http://camunda-optimize.zeebe:80/api/readyz
#        metrics: http://camunda-optimize.zeebe:8092/actuator/prometheus
#      - name: Tasklist
#        id: tasklist
#        version: 8.5.11
#        url: http://localhost:8082
#        readiness: http://camunda-tasklist.zeebe:80/actuator/health/readiness
#        metrics: http://camunda-tasklist.zeebe:80/actuator/prometheus
#      - name: Zeebe Gateway
#        id: zeebeGateway
#        version: 8.5.12
#        urls:
#          grpc: http://localhost:26500
#          http: http://localhost:8088
#        readiness: http://camunda-zeebe-gateway.zeebe:9600/actuator/health/readiness
#        metrics: http://camunda-zeebe-gateway.zeebe:9600/actuator/prometheus
#      - name: Zeebe
#        id: zeebe
#        version: 8.5.12
#        readiness: http://camunda-zeebe.zeebe:9600/actuator/health/readiness
#        metrics: http://camunda-zeebe.zeebe:9600/actuator/prometheus
#---
## Source: camunda-platform/templates/identity/configmap.yaml
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: camunda-identity-configuration
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: identity
#    app.kubernetes.io/version: "8.5.11"
#  annotations:
#    {}
#data:
#  application.yaml: |
#    identity:
#      url: "http://cp-identity.k8s.orb.local"
#
#      authProvider:
#        issuer-url: "http://cp-keycloak.k8s.orb.local/auth/realms/camunda-platform"
#        backend-url: "http://camunda-keycloak:80/auth/realms/camunda-platform"
#
#      component-presets:
#        connectors:
#          applications:
#            - name: Connectors
#              id: ${CAMUNDA_CONNECTORS_CLIENT_ID:${KEYCLOAK_INIT_CONNECTORS_CLIENT_ID:connectors}}
#              type: m2m
#              secret: ${CAMUNDA_CONNECTORS_SECRET:${KEYCLOAK_INIT_CONNECTORS_SECRET:}}
#              permissions:
#                - audience: "operate-api"
#                  definition: read:*
#        console:
#          applications:
#            - name: "Console"
#              id: ${CAMUNDA_CONSOLE_CLIENT_ID:${KEYCLOAK_INIT_CONSOLE_CLIENT_ID:console}}
#              type: public
#              root-url: "http://localhost:8080"
#              redirect-uris:
#                - "/"
#          apis:
#            - name: Console API
#              audience: "console-api"
#              permissions:
#                - definition: write:*
#                  description: "Write permission"
#          roles:
#            - name: "Console"
#              description: "Grants full access to Console"
#              permissions:
#                - audience: "console-api"
#                  definition: write:*
#        identity:
#          apis:
#            - name: "Camunda Identity Resource Server"
#              audience: "camunda-identity-resource-server"
#              permissions:
#                - definition: read
#                  description: "Read permission"
#                - definition: "read:users"
#                  description: "Read users permission"
#                - definition: write
#                  description: "Write permission"
#          roles:
#            - name: "Identity"
#              description: "Provides full access to Identity"
#              permissions:
#                - audience: "camunda-identity-resource-server"
#                  definition: read
#                - audience: "camunda-identity-resource-server"
#                  definition: write
#        operate:
#          applications:
#            - name: Operate
#              id: ${CAMUNDA_OPERATE_CLIENT_ID:${KEYCLOAK_INIT_OPERATE_CLIENT_ID:operate}}
#              type: confidential
#              secret: ${CAMUNDA_OPERATE_SECRET:${KEYCLOAK_INIT_OPERATE_SECRET:}}
#              root-url: "http://cp-operate.k8s.orb.local"
#              redirect-uris:
#                - "/identity-callback"
#          apis:
#            - name: Operate API
#              audience: "operate-api"
#              permissions:
#                - definition: read:*
#                  description: "Read permission"
#                - definition: write:*
#                  description: "Write permission"
#          roles:
#            - name: "Operate"
#              description: "Grants full access to Operate"
#              permissions:
#                - audience: "operate-api"
#                  definition: read:*
#                - audience: "operate-api"
#                  definition: write:*
#        optimize:
#          applications:
#            - name: Optimize
#              id: ${CAMUNDA_OPTIMIZE_CLIENT_ID:${KEYCLOAK_INIT_OPTIMIZE_CLIENT_ID:optimize}}
#              type: confidential
#              secret: ${CAMUNDA_OPTIMIZE_SECRET:${KEYCLOAK_INIT_OPTIMIZE_SECRET:}}
#              root-url: "http://localhost:8083"
#              redirect-uris:
#                - "/api/authentication/callback"
#          apis:
#            - name: Optimize API
#              audience: "optimize-api"
#              permissions:
#                - definition: write:*
#                  description: "Write permission"
#          roles:
#            - name: "Optimize"
#              description: "Grants full access to Optimize"
#              permissions:
#                - audience: "optimize-api"
#                  definition: write:*
#                - audience: "camunda-identity-resource-server"
#                  definition: read:users
#        tasklist:
#          applications:
#            - name: Tasklist
#              id: ${CAMUNDA_TASKLIST_CLIENT_ID:${KEYCLOAK_INIT_TASKLIST_CLIENT_ID:tasklist}}
#              type: confidential
#              secret: ${CAMUNDA_TASKLIST_SECRET:${KEYCLOAK_INIT_TASKLIST_SECRET:}}
#              root-url: "http://localhost:8082"
#              redirect-uris:
#                - "/identity-callback"
#          apis:
#            - name: Tasklist API
#              audience: "tasklist-api"
#              permissions:
#                - definition: read:*
#                  description: "Read permission"
#                - definition: write:*
#                  description: "Write permission"
#          roles:
#            - name: "Tasklist"
#              description: "Grants full access to Tasklist"
#              permissions:
#                - audience: "tasklist-api"
#                  definition: read:*
#                - audience: "tasklist-api"
#                  definition: write:*
#        webmodeler:
#          applications:
#            - name: "Web Modeler"
#              id: ${CAMUNDA_WEBMODELER_CLIENT_ID:${KEYCLOAK_INIT_WEBMODELER_CLIENT_ID:web-modeler}}
#              type: public
#              root-url: "http://localhost:8084"
#              redirect-uris:
#                - "/login-callback"
#          apis:
#            - name: Web Modeler Internal API
#              audience: "web-modeler-api"
#              permissions:
#                - definition: write:*
#                  description: "Write permission"
#            - name: Web Modeler API
#              audience: "web-modeler-public-api"
#              permissions:
#                - definition: create:*
#                  description: "Allows create access for all resources"
#                - definition: read:*
#                  description: "Allows read access to all resources"
#                - definition: update:*
#                  description: "Allows update access to all resources"
#                - definition: delete:*
#                  description: "Allows delete access for all resources"
#          roles:
#            - name: "Web Modeler"
#              description: "Grants full access to Web Modeler"
#              permissions:
#                - audience: "web-modeler-api"
#                  definition: write:*
#                - audience: "camunda-identity-resource-server"
#                  definition: read:users
#        zeebe:
#          apis:
#            - name: Zeebe API
#              audience: "zeebe-api"
#              permissions:
#                - definition: write:*
#                  description: "Write permission"
#          roles:
#            - name: "Zeebe"
#              description: "Grants full access to the Zeebe API"
#              permissions:
#                - audience: "zeebe-api"
#                  definition: write:*
#    keycloak:
#      environment:
#        clients:
#          - name: Identity
#            id: "camunda-identity"
#            type: CONFIDENTIAL
#            secret: ${IDENTITY_CLIENT_SECRET:}
#            root-url: "http://cp-identity.k8s.orb.local"
#            redirect-uris:
#              - "/auth/login-callback"
#      # The presets key should be removed when 8.6.0 of the applications are released
#      presets:
#        tasklist:
#          clients:
#            - name: Tasklist
#              id: tasklist
#              type: confidential
#              secret: ${KEYCLOAK_INIT_TASKLIST_SECRET:}
#              root-url: "http://localhost:8082"
#              redirect-uris:
#                - "/identity-callback"
#        operate:
#          clients:
#            - name: Operate
#              id: ${KEYCLOAK_INIT_OPERATE_CLIENT_ID:operate}
#              type: confidential
#              secret: ${KEYCLOAK_INIT_OPERATE_SECRET:}
#              root-url: "http://cp-operate.k8s.orb.local"
#              redirect-uris:
#                - "/identity-callback"
#        optimize:
#          clients:
#            - name: Optimize
#              id: ${KEYCLOAK_INIT_OPTIMIZE_CLIENT_ID:optimize}
#              type: confidential
#              secret: ${KEYCLOAK_INIT_OPTIMIZE_SECRET:}
#              root-url: "http://localhost:8083"
#              redirect-uris:
#                - "/api/authentication/callback"
#        console:
#          clients:
#            - name: "Console"
#              id: ${KEYCLOAK_INIT_CONSOLE_CLIENT_ID:console}
#              type: public
#              root-url: "http://localhost:8080"
#              redirect-uris:
#                - "/"
#    server:
#      port: 8080
#
#    spring:
#      profiles:
#        active: keycloak
#
#    camunda:
#      identity:
#        audience: "camunda-identity-resource-server"
#---
## Source: camunda-platform/templates/operate/configmap.yaml
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: camunda-operate-configuration
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: operate
#    app.kubernetes.io/version: "8.5.10"
#data:
#  application.yml: |
#    spring:
#      profiles:
#        active: "identity-auth"
#      security:
#        oauth2:
#          resourceserver:
#            jwt:
#              issuer-uri: "http://camunda-keycloak:80/auth/realms/camunda-platform"
#              jwk-set-uri: "http://camunda-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/certs"
#
#    camunda:
#      identity:
#        clientId: "operate"
#        audience: "operate-api"
#        baseUrl: "http://camunda-identity:80"
#    
#    # Operate configuration file
#    camunda.operate:
#      identity:
#        redirectRootUrl: "http://cp-operate.k8s.orb.local"
#    
#      # ELS instance to store Operate data
#      elasticsearch:
#        # Cluster name
#        clusterName: elasticsearch
#        # Host
#        host: camunda-elasticsearch
#        # Transport port
#        port: 9200
#        # Elasticsearch full url
#        url: "http://camunda-elasticsearch:9200"
#      # ELS instance to export Zeebe data to
#      zeebeElasticsearch:
#        # Cluster name
#        clusterName: elasticsearch
#        # Host
#        host: camunda-elasticsearch
#        # Transport port
#        port: 9200
#        # Index prefix, configured in Zeebe Elasticsearch exporter
#        prefix: zeebe-record
#        # Elasticsearch full url
#        url: "http://camunda-elasticsearch:9200"
#      # Zeebe instance
#      zeebe:
#        # Broker contact point
#        brokerContactPoint: "camunda-zeebe-gateway:26500"
#    logging:
#      level:
#        ROOT: INFO
#        io.camunda.operate: INFO
#    #Spring Boot Actuator endpoints to be exposed
#    management.endpoints.web.exposure.include: health,info,conditions,configprops,prometheus,loggers,usage-metrics,backups
#---
## Source: camunda-platform/templates/optimize/configmap.yaml
#kind: ConfigMap
#metadata:
#  name: camunda-optimize-configuration
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: optimize
#    app.kubernetes.io/version: "8.5.10"
#apiVersion: v1
#data:
#  environment-config.yaml: |
#
#    zeebe:
#      enabled: true
#      partitionCount: 3
#      name: zeebe-record
#    es:
#      connection:
#        nodes:
#          - host: "camunda-elasticsearch"
#            httpPort: 9200
#
#    spring:
#      profiles:
#        active: "ccsm"
#
#    security:
#      auth:
#        cookie:
#          same-site:
#            enabled: false
#        ccsm:
#          redirectRootUrl: "http://localhost:8083"
#    api:
#      audience: "optimize-api"
#      jwtSetUri: "http://camunda-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/certs"
#  application-ccsm.yaml: |
#    camunda:
#      identity:
#        clientId: "optimize"
#        audience: "optimize-api"
#        issuer: "http://cp-keycloak.k8s.orb.local/auth/realms/camunda-platform"
#        issuerBackendUrl: "http://camunda-keycloak:80/auth/realms/camunda-platform"
#        baseUrl: "http://camunda-identity:80"
#---
## Source: camunda-platform/templates/tasklist/configmap.yaml
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: camunda-tasklist-configuration
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: tasklist
#    app.kubernetes.io/version: "8.5.11"
#data:
#  application.yml: |
#    spring:
#      profiles:
#        active: identity-auth
#      security:
#        oauth2:
#          resourceserver:
#            jwt:
#              issuer-uri: "http://camunda-keycloak:80/auth/realms/camunda-platform"
#              jwk-set-uri: "http://camunda-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/certs"
#
#    camunda:
#      identity:
#        clientId: "tasklist"
#        audience: "tasklist-api"
#        baseUrl: "http://camunda-identity:80"
#
#    # Tasklist configuration file
#    camunda.tasklist:
#
#      identity:
#        redirectRootUrl: "http://localhost:8082"
#        userAccessRestrictionsEnabled: true
#
#      # Set Tasklist username and password.
#      # If user with <username> does not exists it will be created.
#      # Default: demo/demo
#      #username:
#      #password:
#      # ELS instance to store Tasklist data
#      elasticsearch:
#        # Cluster name
#        clusterName: elasticsearch
#        # Host
#        host: camunda-elasticsearch
#        # Transport port
#        port: 9200
#        # Elasticsearch full url
#        url: "http://camunda-elasticsearch:9200"
#      # ELS instance to export Zeebe data to
#      zeebeElasticsearch:
#        # Cluster name
#        clusterName: elasticsearch
#        # Host
#        host: camunda-elasticsearch
#        # Transport port
#        port: 9200
#        # Index prefix, configured in Zeebe Elasticsearch exporter
#        prefix: zeebe-record
#        # Elasticsearch full url
#        url: "http://camunda-elasticsearch:9200"
#      # Zeebe instance
#      zeebe:
#        # Broker contact point
#        brokerContactPoint: "camunda-zeebe-gateway:26500"
#        restAddress: "http://camunda-zeebe-gateway:8080"
#    #Spring Boot Actuator endpoints to be exposed
#    management.endpoints.web.exposure.include: health,info,conditions,configprops,prometheus,loggers,usage-metrics,backups
#    # Enable or disable metrics
#    #management.metrics.export.prometheus.enabled: false
#---
## Source: camunda-platform/templates/zeebe-gateway/configmap.yaml
#kind: ConfigMap
#metadata:
#  name: camunda-zeebe-gateway-configuration
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: zeebe-gateway
#    app.kubernetes.io/version: "8.5.12"
#apiVersion: v1
#data:
#  gateway-log4j2.xml: |
#  application.yaml: |
#    management:
#
#    spring:
#      profiles:
#        active: "identity-auth"
#
#    server:
#      address: "0.0.0.0"
#      port: "8080"
#    camunda:
#      identity:
#        type: "KEYCLOAK"
#        issuerBackendUrl: "http://camunda-keycloak:80/auth/realms/camunda-platform"
#        audience: "zeebe-api"
#        baseUrl: "http://camunda-identity:80"
#    zeebe:
#      gateway:
#        security:
#          authentication:
#            mode: identity
#        monitoring:
#          host: 0.0.0.0
#          port: "9600"
#        cluster:
#          clusterName: camunda-zeebe
#          port: "26502"
#---
## Source: camunda-platform/templates/zeebe/configmap.yaml
#kind: ConfigMap
#metadata:
#  name: camunda-zeebe-configuration
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: zeebe-broker
#    app.kubernetes.io/version: "8.5.12"
#apiVersion: v1
#data:
#  application.yaml: |
#    zeebe:
#      broker:
#        exporters:
#          elasticsearch:
#            className: "io.camunda.zeebe.exporter.ElasticsearchExporter"
#            args:
#              url: "http://camunda-elasticsearch:9200"
#              index:
#                prefix: "zeebe-record"
#        gateway:
#          enable: true
#          network:
#            port: 26500
#          security:
#            enabled: false
#            authentication:
#              mode: none
#        network:
#          host: 0.0.0.0
#          commandApi:
#            port: 26501
#          internalApi:
#            port: 26502
#          monitoringApi:
#            port: "9600"
#        cluster:
#          clusterSize: "3"
#          replicationFactor: "3"
#          partitionsCount: "3"
#          clusterName: camunda-zeebe
#        threads:
#          cpuThreadCount: "3"
#          ioThreadCount: "3"
#  startup.sh: |
#    #!/usr/bin/env bash
#    set -eux -o pipefail
#    export ZEEBE_BROKER_CLUSTER_NODEID=${ZEEBE_BROKER_CLUSTER_NODEID:-$[${K8S_NAME##*-} * 1 + 0]}
#
#    if [ "$(ls -A /exporters/)" ]; then
#      mkdir -p /usr/local/zeebe/exporters/
#      cp -a /exporters/*.jar /usr/local/zeebe/exporters/
#    else
#      echo "No exporters available."
#    fi
#    exec /usr/local/zeebe/bin/broker
#
#  broker-log4j2.xml: |
#---
## Source: camunda-platform/charts/elasticsearch/charts/kibana/templates/pvc.yaml
#kind: PersistentVolumeClaim
#apiVersion: v1
#metadata:
#  name: camunda-kibana
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: kibana
#    app.kubernetes.io/version: 8.12.2
#    helm.sh/chart: kibana-10.13.0
#spec:
#  accessModes:
#    - "ReadWriteOnce"
#  resources:
#    requests:
#      storage: "10Gi"
#---
## Source: camunda-platform/charts/elasticsearch/charts/kibana/templates/service.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: camunda-kibana
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: kibana
#    app.kubernetes.io/version: 8.12.2
#    helm.sh/chart: kibana-10.13.0
#spec:
#  type: ClusterIP
#  sessionAffinity: None
#  ports:
#    - name: http
#      port: 5601
#      targetPort: http
#      nodePort: null
#  selector:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/name: kibana
#---
## Source: camunda-platform/charts/elasticsearch/templates/master/svc-headless.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: camunda-elasticsearch-master-hl
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: elasticsearch
#    app.kubernetes.io/version: 8.13.2
#    helm.sh/chart: elasticsearch-20.0.4
#    app.kubernetes.io/component: master
#spec:
#  type: ClusterIP
#  clusterIP: None
#  publishNotReadyAddresses: true
#  ports:
#    - name: tcp-rest-api
#      port: 9200
#      targetPort: rest-api
#    - name: tcp-transport
#      port: 9300
#      targetPort: transport
#  selector:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/name: elasticsearch
#    app.kubernetes.io/component: master
#---
## Source: camunda-platform/charts/elasticsearch/templates/service.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: camunda-elasticsearch
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: elasticsearch
#    app.kubernetes.io/version: 8.13.2
#    helm.sh/chart: elasticsearch-20.0.4
#    app.kubernetes.io/component: master
#spec:
#  type: ClusterIP
#  sessionAffinity: None
#  ports:
#    - name: tcp-rest-api
#      port: 9200
#      targetPort: rest-api
#      nodePort: null
#    - name: tcp-transport
#      port: 9300
#      nodePort: null
#  selector:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/name: elasticsearch
#    app.kubernetes.io/component: master
#---
## Source: camunda-platform/charts/identityKeycloak/charts/postgresql/templates/primary/svc-headless.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: camunda-postgresql-hl
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: postgresql
#    app.kubernetes.io/version: 16.2.0
#    helm.sh/chart: postgresql-14.3.3
#    app.kubernetes.io/component: primary
#  annotations:
#    # Use this annotation in addition to the actual publishNotReadyAddresses
#    # field below because the annotation will stop being respected soon but the
#    # field is broken in some versions of Kubernetes:
#    # https://github.com/kubernetes/kubernetes/issues/58662
#    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
#spec:
#  type: ClusterIP
#  clusterIP: None
#  # We want all pods in the StatefulSet to have their addresses published for
#  # the sake of the other Postgresql pods even before they're ready, since they
#  # have to be able to talk to each other in order to become ready.
#  publishNotReadyAddresses: true
#  ports:
#    - name: tcp-postgresql
#      port: 5432
#      targetPort: tcp-postgresql
#  selector:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/name: postgresql
#    app.kubernetes.io/component: primary
#---
## Source: camunda-platform/charts/identityKeycloak/charts/postgresql/templates/primary/svc.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: camunda-postgresql
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: postgresql
#    app.kubernetes.io/version: 16.2.0
#    helm.sh/chart: postgresql-14.3.3
#    app.kubernetes.io/component: primary
#spec:
#  type: ClusterIP
#  sessionAffinity: None
#  ports:
#    - name: tcp-postgresql
#      port: 5432
#      targetPort: tcp-postgresql
#      nodePort: null
#  selector:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/name: postgresql
#    app.kubernetes.io/component: primary
#---
## Source: camunda-platform/charts/identityKeycloak/templates/headless-service.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: camunda-keycloak-headless
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: keycloak
#    app.kubernetes.io/version: 23.0.7
#    helm.sh/chart: identityKeycloak-19.4.1
#    app.kubernetes.io/component: keycloak
#spec:
#  type: ClusterIP
#  clusterIP: None
#  ports:
#    - name: http
#      port: 80
#      protocol: TCP
#      targetPort: http
#  publishNotReadyAddresses: true
#  selector:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/name: keycloak
#    app.kubernetes.io/component: keycloak
#---
## Source: camunda-platform/charts/identityKeycloak/templates/service.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: camunda-keycloak
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: keycloak
#    app.kubernetes.io/version: 23.0.7
#    helm.sh/chart: identityKeycloak-19.4.1
#    app.kubernetes.io/component: keycloak
#spec:
#  type: ClusterIP
#  sessionAffinity: None
#  ports:
#    - name: http
#      port: 80
#      protocol: TCP
#      targetPort: http
#      nodePort: null
#  selector:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/name: keycloak
#    app.kubernetes.io/component: keycloak
#---
## Source: camunda-platform/templates/identity/service.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: camunda-identity
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: identity
#    app.kubernetes.io/version: "8.5.11"
#  annotations:
#spec:
#  type: ClusterIP
#  ports:
#    - port: 80
#      name: http
#      targetPort: 8080
#      protocol: TCP
#    - port: 82
#      name: metrics
#      targetPort: 8082
#      protocol: TCP
#  selector:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    app.kubernetes.io/component: identity
#---
## Source: camunda-platform/templates/operate/service.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: camunda-operate
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: operate
#    app.kubernetes.io/version: "8.5.10"
#  annotations:
#spec:
#  type: ClusterIP
#  ports:
#    - port: 80
#      name: http
#      targetPort: 8080
#      protocol: TCP
#  selector:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    app.kubernetes.io/component: operate
#---
## Source: camunda-platform/templates/optimize/service.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: camunda-optimize
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: optimize
#    app.kubernetes.io/version: "8.5.10"
#  annotations:
#spec:
#  type: ClusterIP
#  ports:
#    - port: 80
#      name: http
#      targetPort: 8090
#      protocol: TCP
#    - port: 8092
#      name: management
#      targetPort: 8092
#      protocol: TCP
#  selector:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    app.kubernetes.io/component: optimize
#---
## Source: camunda-platform/templates/tasklist/service.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: camunda-tasklist
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: tasklist
#    app.kubernetes.io/version: "8.5.11"
#  annotations:
#spec:
#  type: ClusterIP
#  ports:
#    - port: 80
#      name: http
#      targetPort: 8080
#      protocol: TCP
#  selector:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    app.kubernetes.io/component: tasklist
#---
## Source: camunda-platform/templates/zeebe-gateway/service.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: camunda-zeebe-gateway
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: zeebe-gateway
#    app.kubernetes.io/version: "8.5.12"
#  annotations:
#spec:
#  type: ClusterIP
#  selector:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    app.kubernetes.io/component: zeebe-gateway
#  ports:
#    - port: 9600
#      protocol: TCP
#      name: http
#    - port: 26500
#      protocol: TCP
#      name: gateway
#    - port: 8080
#      protocol: TCP
#      name: rest
#---
## Source: camunda-platform/templates/zeebe/service.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: "camunda-zeebe"
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: zeebe-broker
#    app.kubernetes.io/version: "8.5.12"
#  annotations:
#spec:
#  clusterIP: None
#  publishNotReadyAddresses: true
#  type: ClusterIP
#  ports:
#    - port: 9600
#      protocol: TCP
#      name: http
#    - port: 26502
#      protocol: TCP
#      name: internal
#    - port: 26501
#      protocol: TCP
#      name: command
#  selector:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    app.kubernetes.io/component: zeebe-broker
#---
## Source: camunda-platform/charts/elasticsearch/charts/kibana/templates/deployment.yaml
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: camunda-kibana
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: kibana
#    app.kubernetes.io/version: 8.12.2
#    helm.sh/chart: kibana-10.13.0
#spec:
#  replicas: 1
#  strategy:
#    type: RollingUpdate
#  selector:
#    matchLabels:
#      app.kubernetes.io/instance: camunda
#      app.kubernetes.io/name: kibana
#  template:
#    metadata:
#      labels:
#        app.kubernetes.io/instance: camunda
#        app.kubernetes.io/managed-by: Helm
#        app.kubernetes.io/name: kibana
#        app.kubernetes.io/version: 8.12.2
#        helm.sh/chart: kibana-10.13.0
#        app: kibana
#    spec:
#      
#      automountServiceAccountToken: false
#      affinity:
#        podAffinity:
#          
#        podAntiAffinity:
#          preferredDuringSchedulingIgnoredDuringExecution:
#            - podAffinityTerm:
#                labelSelector:
#                  matchLabels:
#                    app.kubernetes.io/instance: camunda
#                    app.kubernetes.io/name: kibana
#                topologyKey: kubernetes.io/hostname
#              weight: 1
#        nodeAffinity:
#          
#      securityContext:
#        fsGroup: 1001
#        fsGroupChangePolicy: Always
#        supplementalGroups: []
#        sysctls: []
#      serviceAccountName: camunda-kibana
#      initContainers:
#        - name: copy-default-plugins
#          image: docker.io/bitnami/kibana:8.12.2-debian-12-r1
#          imagePullPolicy: "IfNotPresent"
#          securityContext:
#            allowPrivilegeEscalation: false
#            capabilities:
#              drop:
#              - ALL
#            privileged: false
#            readOnlyRootFilesystem: false
#            runAsGroup: 0
#            runAsNonRoot: true
#            runAsUser: 1001
#            seLinuxOptions: null
#            seccompProfile:
#              type: RuntimeDefault
#          command:
#            - /bin/bash
#          args:
#            - -ec
#            - |
#                #!/bin/bash
#
#                . /opt/bitnami/scripts/libfs.sh
#                . /opt/bitnami/scripts/kibana-env.sh
#
#                if ! is_dir_empty "$SERVER_DEFAULT_PLUGINS_DIR"; then
#                    cp -nr "$SERVER_DEFAULT_PLUGINS_DIR"/* /plugins
#                fi
#          volumeMounts:
#            - name: empty-dir
#              mountPath: /plugins
#              subPath: app-plugins-dir
#      containers:
#        - name: kibana
#          image: docker.io/bitnami/kibana:8.12.2-debian-12-r1
#          imagePullPolicy: IfNotPresent
#          securityContext:
#            allowPrivilegeEscalation: false
#            capabilities:
#              drop:
#              - ALL
#            privileged: false
#            readOnlyRootFilesystem: false
#            runAsGroup: 0
#            runAsNonRoot: true
#            runAsUser: 1001
#            seLinuxOptions: null
#            seccompProfile:
#              type: RuntimeDefault
#          env:
#            - name: BITNAMI_DEBUG
#              value: "false"
#            - name: KIBANA_PORT_NUMBER
#              value: "5601"
#            - name: KIBANA_ELASTICSEARCH_URL
#              value: "http://camunda-elasticsearch:9200"
#            - name: KIBANA_ELASTICSEARCH_PORT_NUMBER
#              value: "9200"
#            - name: KIBANA_FORCE_INITSCRIPTS
#              value: "false"
#            - name: KIBANA_SERVER_ENABLE_TLS
#              value: "false"
#            - name: KIBANA_ELASTICSEARCH_ENABLE_TLS
#              value: "false"
#            - name: KIBANA_ELASTICSEARCH_TLS_USE_PEM
#              value: "false"
#            - name: KIBANA_ELASTICSEARCH_TLS_VERIFICATION_MODE
#              value: "full"
#          envFrom:
#          ports:
#            - name: http
#              containerPort: 5601
#              protocol: TCP
#          livenessProbe:
#            failureThreshold: 6
#            initialDelaySeconds: 120
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 5
#            httpGet:
#              path: /login
#              port: http
#              scheme: HTTP
#          volumeMounts:
#            - name: empty-dir
#              mountPath: /tmp
#              subPath: tmp-dir
#            - name: empty-dir
#              mountPath: /opt/bitnami/kibana/config
#              subPath: app-conf-dir
#            - name: empty-dir
#              mountPath: /opt/bitnami/kibana/tmp
#              subPath: app-tmp-dir
#            - name: empty-dir
#              mountPath: /opt/bitnami/kibana/logs
#              subPath: app-logs-dir
#            - name: empty-dir
#              mountPath: /opt/bitnami/kibana/plugins
#              subPath: app-plugins-dir
#            - name: kibana-data
#              mountPath: /bitnami/kibana
#            - name: kibana-config
#              mountPath: /bitnami/kibana/conf
#      volumes:
#        - name: empty-dir
#          emptyDir: {}
#        - name: kibana-data
#          persistentVolumeClaim:
#            claimName: camunda-kibana
#        - name: kibana-config
#          configMap:
#            name: camunda-kibana-conf
#---
## Source: camunda-platform/templates/identity/deployment.yaml
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: camunda-identity
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: identity
#    app.kubernetes.io/version: "8.5.11"
#  annotations:
#    {}
#spec:
#  strategy:
#    type: RollingUpdate
#  replicas: 1
#  selector:
#    matchLabels:
#      app: camunda-platform
#      app.kubernetes.io/name: camunda-platform
#      app.kubernetes.io/instance: camunda
#      app.kubernetes.io/managed-by: Helm
#      app.kubernetes.io/part-of: camunda-platform
#      app.kubernetes.io/component: identity
#  template:
#    metadata:
#      labels:
#        app: camunda-platform
#        app.kubernetes.io/name: camunda-platform
#        app.kubernetes.io/instance: camunda
#        app.kubernetes.io/managed-by: Helm
#        app.kubernetes.io/part-of: camunda-platform
#        helm.sh/chart: camunda-platform-10.4.8
#        app.kubernetes.io/component: identity
#        app.kubernetes.io/version: "8.5.11"
#      annotations:
#        checksum/config: d136633f03d8046587fcc337018339d6684cd6e891ffc4af42633581a72c6519
#    spec:
#      imagePullSecrets:
#        []
#      initContainers:
#        []
#      containers:
#        - name: camunda-platform
#          image: camunda/identity:8.5.11
#          imagePullPolicy: IfNotPresent
#          securityContext:
#            allowPrivilegeEscalation: false
#            privileged: false
#            readOnlyRootFilesystem: true
#            runAsNonRoot: true
#            runAsUser: 1001
#            seccompProfile:
#              type: RuntimeDefault
#          env:
#            - name: KEYCLOAK_INIT_OPERATE_SECRET
#              valueFrom:
#                secretKeyRef:
#                  name: camunda-operate-identity-secret
#                  key: operate-secret
#            - name: KEYCLOAK_INIT_CONSOLE_SECRET
#              valueFrom:
#                secretKeyRef:
#                  name: camunda-console-identity-secret
#                  key: console-secret
#            - name: KEYCLOAK_INIT_TASKLIST_SECRET
#              valueFrom:
#                secretKeyRef:
#                  name: camunda-tasklist-identity-secret
#                  key: tasklist-secret
#            - name: KEYCLOAK_INIT_OPTIMIZE_SECRET
#              valueFrom:
#                secretKeyRef:
#                  name: camunda-optimize-identity-secret
#                  key: optimize-secret
#            - name: KEYCLOAK_INIT_WEBMODELER_ROOT_URL
#              value: "http://localhost:8084"
#            - name: KEYCLOAK_INIT_ZEEBE_NAME
#              value: "Zeebe"
#            - name: KEYCLOAK_CLIENTS_0_NAME
#              value: Connectors
#            - name: KEYCLOAK_CLIENTS_0_ID
#              value: connectors
#            - name: KEYCLOAK_CLIENTS_0_SECRET
#              valueFrom:
#                secretKeyRef:
#                  key: connectors-secret
#                  name: camunda-connectors-identity-secret
#            - name: KEYCLOAK_CLIENTS_0_ROOT_URL
#              value: http://placeholder
#            - name: KEYCLOAK_CLIENTS_0_REDIRECT_URIS_0
#              value: /
#            - name: KEYCLOAK_CLIENTS_0_PERMISSIONS_0_RESOURCE_SERVER_ID
#              value: "operate-api"
#            - name: KEYCLOAK_CLIENTS_0_PERMISSIONS_0_DEFINITION
#              value: "read:*"
#            - name: KEYCLOAK_CLIENTS_1_NAME
#              value: "Zeebe"
#            - name: KEYCLOAK_CLIENTS_1_ID
#              value: "zeebe"
#            - name: KEYCLOAK_CLIENTS_1_SECRET
#              valueFrom:
#                secretKeyRef:
#                  name: camunda-zeebe-identity-secret
#                  key: zeebe-secret
#            - name: KEYCLOAK_CLIENTS_1_TYPE
#              value: "M2M"
#            - name: KEYCLOAK_CLIENTS_1_PERMISSIONS_0_RESOURCE_SERVER_ID
#              value: "zeebe-api"
#            - name: KEYCLOAK_CLIENTS_1_PERMISSIONS_0_DEFINITION
#              value: "write:*"
#            - name: KEYCLOAK_URL
#              value: "http://camunda-keycloak:80/auth"
#            - name: KEYCLOAK_SETUP_USER
#              value: "admin"
#            - name: KEYCLOAK_SETUP_PASSWORD
#              valueFrom:
#                secretKeyRef:
#                  name: camunda-keycloak
#                  key: admin-password
#            - name: KEYCLOAK_USERS_0_USERNAME
#              value: "demo"
#            - name: KEYCLOAK_USERS_0_PASSWORD
#              value: "demo"
#            - name: KEYCLOAK_USERS_0_EMAIL
#              value: "demo@example.org"
#            - name: KEYCLOAK_USERS_0_FIRST_NAME
#              value: "Demo"
#            - name: KEYCLOAK_USERS_0_LAST_NAME
#              value: "User"
#            - name: KEYCLOAK_USERS_0_ROLES_0
#              value: "Identity"
#            - name: KEYCLOAK_USERS_0_ROLES_1
#              value: "Operate"
#            - name: KEYCLOAK_USERS_0_ROLES_2
#              value: "Tasklist"
#            - name: KEYCLOAK_USERS_0_ROLES_3
#              value: "Optimize"
#            - name: KEYCLOAK_USERS_0_ROLES_4
#              value: "Web Modeler"
#            - name: KEYCLOAK_USERS_0_ROLES_5
#              value: "Console"
#          resources:
#            limits:
#              cpu: 2000m
#              memory: 2Gi
#            requests:
#              cpu: 600m
#              memory: 400Mi
#          ports:
#            - containerPort: 8080
#              name: http
#              protocol: TCP
#            - containerPort: 8082
#              name: metrics
#              protocol: TCP
#          readinessProbe:
#            httpGet:
#              path: /actuator/health
#              scheme: HTTP
#              port: metrics
#            initialDelaySeconds: 30
#            periodSeconds: 30
#            successThreshold: 1
#            failureThreshold: 5
#            timeoutSeconds: 1
#          volumeMounts:
#            - mountPath: /tmp
#              name: tmp
#            - name: config
#              mountPath: /app/config/application.yaml
#              subPath: application.yaml
#
#      volumes:
#        - name: tmp
#          emptyDir: {}
#        - name: config
#          configMap:
#            name: camunda-identity-configuration
#      serviceAccountName: camunda-identity
#      securityContext:
#        fsGroup: 1001
#        runAsNonRoot: true
#        seccompProfile:
#          type: RuntimeDefault
#---
## Source: camunda-platform/templates/operate/deployment.yaml
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: camunda-operate
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: operate
#    app.kubernetes.io/version: "8.5.10"
#  annotations:
#    {}
#spec:
#  strategy:
#    type: Recreate
#  replicas: 1
#  selector:
#    matchLabels:
#      app: camunda-platform
#      app.kubernetes.io/name: camunda-platform
#      app.kubernetes.io/instance: camunda
#      app.kubernetes.io/managed-by: Helm
#      app.kubernetes.io/part-of: camunda-platform
#      app.kubernetes.io/component: operate
#  template:
#    metadata:
#      labels:
#        app: camunda-platform
#        app.kubernetes.io/name: camunda-platform
#        app.kubernetes.io/instance: camunda
#        app.kubernetes.io/managed-by: Helm
#        app.kubernetes.io/part-of: camunda-platform
#        helm.sh/chart: camunda-platform-10.4.8
#        app.kubernetes.io/component: operate
#        app.kubernetes.io/version: "8.5.10"
#      annotations:
#        checksum/config: b7c488ab225b60f0d609eeaa77ee56d730244e2e472d6a241cdec6fd4695a24d
#    spec:
#      imagePullSecrets:
#        []
#      initContainers:
#        - name: migration
#          image: camunda/operate:8.5.10
#          command: ['/bin/sh', '/usr/local/operate/bin/migrate']
#          securityContext:
#            allowPrivilegeEscalation: false
#            privileged: false
#            readOnlyRootFilesystem: true
#            runAsNonRoot: true
#            runAsUser: 1001
#            seccompProfile:
#              type: RuntimeDefault
#          env:
#            - name: CAMUNDA_OPERATE_ELASTICSEARCH_HOST
#              value: "camunda-elasticsearch"
#            - name: CAMUNDA_OPERATE_ELASTICSEARCH_HTTP_PORT
#              value: "9200"
#          resources:
#            limits:
#              cpu: 2000m
#              memory: 2Gi
#            requests:
#              cpu: 600m
#              memory: 1Gi
#          volumeMounts:
#            - name: config
#              mountPath: /usr/local/operate/config/application.yml
#              subPath: application.yml
#            - name: tmp
#              mountPath: /tmp
#            - name: camunda
#              mountPath: /camunda
#      containers:
#        - name: operate
#          image: camunda/operate:8.5.10
#          imagePullPolicy: IfNotPresent
#          securityContext:
#            allowPrivilegeEscalation: false
#            privileged: false
#            readOnlyRootFilesystem: true
#            runAsNonRoot: true
#            runAsUser: 1001
#            seccompProfile:
#              type: RuntimeDefault
#          env:
#            - name: CAMUNDA_IDENTITY_CLIENT_SECRET
#              valueFrom:
#                secretKeyRef:
#                  name: camunda-operate-identity-secret
#                  key: operate-secret
#            - name: ZEEBE_CLIENT_ID
#              value: "zeebe"
#            - name: ZEEBE_CLIENT_SECRET
#              valueFrom:
#                secretKeyRef:
#                  name: camunda-zeebe-identity-secret
#                  key: zeebe-secret
#            - name: ZEEBE_AUTHORIZATION_SERVER_URL
#              value: "http://camunda-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/token"
#            - name: ZEEBE_TOKEN_AUDIENCE
#              value: "zeebe-api"
#            - name: ZEEBE_CLIENT_CONFIG_PATH
#              value: /tmp/zeebe_auth_cache
#            - name: CAMUNDA_OPERATE_BACKUP_REPOSITORY_NAME
#              value: operate-backup
#          envFrom:
#            - configMapRef:
#                name: camunda-camunda-platform-identity-env-vars
#          resources:
#            limits:
#              cpu: 2000m
#              memory: 2Gi
#            requests:
#              cpu: 600m
#              memory: 400Mi
#          ports:
#            - containerPort: 8080
#              name: http
#              protocol: TCP
#          readinessProbe:
#            httpGet:
#              path: /actuator/health/readiness
#              scheme: HTTP
#              port: http
#            initialDelaySeconds: 30
#            periodSeconds: 30
#            successThreshold: 1
#            failureThreshold: 5
#            timeoutSeconds: 1
#          volumeMounts:
#            - name: config
#              mountPath: /usr/local/operate/config/application.yml
#              subPath: application.yml
#            - name: tmp
#              mountPath: /tmp
#            - name: camunda
#              mountPath: /camunda
#      volumes:
#        - name: config
#          configMap:
#            name: camunda-operate-configuration
#            defaultMode: 484
#        - name: tmp
#          emptyDir: {}
#        - name: camunda
#          emptyDir: {}
#      serviceAccountName: camunda-operate
#      securityContext:
#        fsGroup: 1001
#        runAsNonRoot: true
#        seccompProfile:
#          type: RuntimeDefault
#---
## Source: camunda-platform/templates/optimize/deployment.yaml
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: camunda-optimize
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: optimize
#    app.kubernetes.io/version: "8.5.10"
#  annotations:
#    {}
#spec:
#  strategy:
#    type: Recreate
#  replicas: 1
#  selector:
#    matchLabels:
#      app: camunda-platform
#      app.kubernetes.io/name: camunda-platform
#      app.kubernetes.io/instance: camunda
#      app.kubernetes.io/managed-by: Helm
#      app.kubernetes.io/part-of: camunda-platform
#      app.kubernetes.io/component: optimize
#  template:
#    metadata:
#      labels:
#        app: camunda-platform
#        app.kubernetes.io/name: camunda-platform
#        app.kubernetes.io/instance: camunda
#        app.kubernetes.io/managed-by: Helm
#        app.kubernetes.io/part-of: camunda-platform
#        helm.sh/chart: camunda-platform-10.4.8
#        app.kubernetes.io/component: optimize
#        app.kubernetes.io/version: "8.5.10"
#      annotations:
#        checksum/config: e0f2baf3f26945365606d9fa303951e42d66f16f78e186161a01264153e93818
#    spec:
#      imagePullSecrets:
#        []
#      initContainers:
#        - name: migration
#          image: camunda/optimize:8.5.10
#          command: ['./upgrade/upgrade.sh', '--skip-warning']
#          securityContext:
#            allowPrivilegeEscalation: false
#            privileged: false
#            readOnlyRootFilesystem: true
#            runAsNonRoot: true
#            runAsUser: 1001
#            seccompProfile:
#              type: RuntimeDefault
#          env:
#            - name: OPTIMIZE_ELASTICSEARCH_HOST
#              value: "camunda-elasticsearch"
#            - name: OPTIMIZE_ELASTICSEARCH_HTTP_PORT
#              value: "9200"
#          resources:
#            limits:
#              cpu: 2000m
#              memory: 2Gi
#            requests:
#              cpu: 600m
#              memory: 1Gi
#          volumeMounts:
#            - mountPath: /tmp
#              name: tmp
#            - mountPath: /camunda
#              name: camunda
#            - mountPath: /optimize/config/environment-config.yaml
#              subPath: environment-config.yaml
#              name: environment-config
#            - mountPath: /optimize/config/application-ccsm.yaml
#              subPath: application-ccsm.yaml
#              name: environment-config
#      containers:
#        - name: optimize
#          image: camunda/optimize:8.5.10
#          imagePullPolicy: IfNotPresent
#          securityContext:
#            allowPrivilegeEscalation: false
#            privileged: false
#            readOnlyRootFilesystem: true
#            runAsNonRoot: true
#            runAsUser: 1001
#            seccompProfile:
#              type: RuntimeDefault
#          env:
#            - name: OPTIMIZE_ELASTICSEARCH_HOST
#              value: "camunda-elasticsearch"
#            - name: OPTIMIZE_ELASTICSEARCH_HTTP_PORT
#              value: "9200"
#            - name: SPRING_PROFILES_ACTIVE
#              value: ccsm
#            - name: CAMUNDA_IDENTITY_CLIENT_SECRET
#              valueFrom:
#                secretKeyRef:
#                  name: camunda-optimize-identity-secret
#                  key: optimize-secret
#            - name: CAMUNDA_OPTIMIZE_BACKUP_REPOSITORY_NAME
#              value: optimize-backup
#          envFrom:
#            - configMapRef:
#                name: camunda-camunda-platform-identity-env-vars
#          resources:
#            limits:
#              cpu: 2000m
#              memory: 2Gi
#            requests:
#              cpu: 600m
#              memory: 1Gi
#          ports:
#            - containerPort: 8090
#              name: http
#              protocol: TCP
#            - containerPort: 8092
#              name: management
#              protocol: TCP
#          readinessProbe:
#            httpGet:
#              path: /api/readyz
#              scheme: HTTP
#              port: http
#            initialDelaySeconds: 30
#            periodSeconds: 30
#            successThreshold: 1
#            failureThreshold: 5
#            timeoutSeconds: 1
#          volumeMounts:
#            - mountPath: /tmp
#              name: tmp
#            - mountPath: /camunda
#              name: camunda
#            - mountPath: /optimize/config/environment-config.yaml
#              subPath: environment-config.yaml
#              name: environment-config
#            - mountPath: /optimize/config/application-ccsm.yaml
#              subPath: application-ccsm.yaml
#              name: environment-config
#      volumes:
#        - name: tmp
#          emptyDir: {}
#        - name: camunda
#          emptyDir: {}
#        - name: environment-config
#          configMap:
#            name: camunda-optimize-configuration
#            defaultMode: 492
#      serviceAccountName: camunda-optimize
#      securityContext:
#        fsGroup: 1001
#        runAsNonRoot: true
#        seccompProfile:
#          type: RuntimeDefault
#---
## Source: camunda-platform/templates/tasklist/deployment.yaml
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: camunda-tasklist
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: tasklist
#    app.kubernetes.io/version: "8.5.11"
#  annotations:
#    {}
#spec:
#  strategy:
#    type: Recreate
#  replicas: 1
#  selector:
#    matchLabels:
#      app: camunda-platform
#      app.kubernetes.io/name: camunda-platform
#      app.kubernetes.io/instance: camunda
#      app.kubernetes.io/managed-by: Helm
#      app.kubernetes.io/part-of: camunda-platform
#      app.kubernetes.io/component: tasklist
#  template:
#    metadata:
#      labels:
#        app: camunda-platform
#        app.kubernetes.io/name: camunda-platform
#        app.kubernetes.io/instance: camunda
#        app.kubernetes.io/managed-by: Helm
#        app.kubernetes.io/part-of: camunda-platform
#        helm.sh/chart: camunda-platform-10.4.8
#        app.kubernetes.io/component: tasklist
#        app.kubernetes.io/version: "8.5.11"
#      annotations:
#        checksum/config: b22cd67e0e8934c6710ae5a9b57651fdfa7b7c6ffb6f6e045fbe40f9b04a162a
#    spec:
#      imagePullSecrets:
#        []
#      initContainers:
#        []
#      containers:
#        - name: tasklist
#          image: camunda/tasklist:8.5.11
#          imagePullPolicy: IfNotPresent
#          securityContext:
#            allowPrivilegeEscalation: false
#            privileged: false
#            readOnlyRootFilesystem: true
#            runAsNonRoot: true
#            runAsUser: 1001
#            seccompProfile:
#              type: RuntimeDefault
#          env:
#            - name: CAMUNDA_IDENTITY_CLIENT_SECRET
#              valueFrom:
#                secretKeyRef:
#                  name: camunda-tasklist-identity-secret
#                  key: tasklist-secret
#            - name: ZEEBE_CLIENT_ID
#              value: "zeebe"
#            - name: ZEEBE_CLIENT_SECRET
#              valueFrom:
#                secretKeyRef:
#                  name: camunda-zeebe-identity-secret
#                  key: zeebe-secret
#            - name: ZEEBE_AUTHORIZATION_SERVER_URL
#              value: "http://camunda-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/token"
#            - name: ZEEBE_TOKEN_AUDIENCE
#              value: "zeebe-api"
#            - name: HOME
#              value: /parent
#            - name: ZEEBE_CLIENT_CONFIG_PATH
#              value: /tmp/zeebe_auth_cache
#            - name: CAMUNDA_TASKLIST_BACKUP_REPOSITORY_NAME
#              value: tasklist-backup
#          envFrom:
#            - configMapRef:
#                name: camunda-camunda-platform-identity-env-vars
#          resources:
#            limits:
#              cpu: 1000m
#              memory: 2Gi
#            requests:
#              cpu: 400m
#              memory: 1Gi
#          ports:
#            - containerPort: 8080
#              name: http
#              protocol: TCP
#          readinessProbe:
#            httpGet:
#              path: /actuator/health/readiness
#              scheme: HTTP
#              port: http
#            initialDelaySeconds: 30
#            periodSeconds: 30
#            successThreshold: 1
#            failureThreshold: 5
#            timeoutSeconds: 1
#          volumeMounts:
#            - name: config
#              mountPath: /app/resources/application.yml
#              subPath: application.yml
#            - name: config
#              mountPath: /usr/local/tasklist/config/application.yml
#              subPath: application.yml
#            - mountPath: /tmp
#              name: tmp
#            - mountPath: /camunda
#              name: camunda
#      volumes:
#        - name: config
#          configMap:
#            name: camunda-tasklist-configuration
#            defaultMode: 484
#        - name: tmp
#          emptyDir: {}
#        - name: camunda
#          emptyDir: {}
#      serviceAccountName: camunda-tasklist
#      securityContext:
#        fsGroup: 1001
#        runAsNonRoot: true
#        seccompProfile:
#          type: RuntimeDefault
#---
## Source: camunda-platform/templates/zeebe-gateway/deployment.yaml
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: camunda-zeebe-gateway
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: zeebe-gateway
#    app.kubernetes.io/version: "8.5.12"
#  annotations:
#    {}
#spec:
#  strategy:
#    type: RollingUpdate
#  replicas: 1
#  selector:
#    matchLabels:
#      app: camunda-platform
#      app.kubernetes.io/name: camunda-platform
#      app.kubernetes.io/instance: camunda
#      app.kubernetes.io/managed-by: Helm
#      app.kubernetes.io/part-of: camunda-platform
#      app.kubernetes.io/component: zeebe-gateway
#  template:
#    metadata:
#      labels:
#        app: camunda-platform
#        app.kubernetes.io/name: camunda-platform
#        app.kubernetes.io/instance: camunda
#        app.kubernetes.io/managed-by: Helm
#        app.kubernetes.io/part-of: camunda-platform
#        helm.sh/chart: camunda-platform-10.4.8
#        app.kubernetes.io/component: zeebe-gateway
#        app.kubernetes.io/version: "8.5.12"
#      annotations:
#        checksum/config: dbfb2aeab50e012fcea3f3858adf2f7c4f5ffa8a9cd88cc35a61ab8f22309bf1
#    spec:
#      imagePullSecrets:
#        []
#      initContainers:
#        []
#      containers:
#        - name: zeebe-gateway
#          image: camunda/zeebe:8.5.12
#          imagePullPolicy: IfNotPresent
#          ports:
#            - containerPort: 9600
#              name: http
#            - containerPort: 26500
#              name: gateway
#            - containerPort: 26502
#              name: internal
#            - containerPort: 8080
#              name: rest
#          env:
#            - name: ZEEBE_STANDALONE_GATEWAY
#              value: "true"
#            - name: ZEEBE_GATEWAY_CLUSTER_MEMBERID
#              valueFrom:
#                fieldRef:
#                  fieldPath: metadata.name
#            - name: ZEEBE_LOG_LEVEL
#              value: "info"
#            - name: JAVA_TOOL_OPTIONS
#              value: "-XX:+ExitOnOutOfMemoryError"
#            - name: ZEEBE_GATEWAY_CLUSTER_INITIALCONTACTPOINTS
#              value: camunda-zeebe:26502
#            - name: ZEEBE_GATEWAY_NETWORK_HOST
#              value: 0.0.0.0
#            - name: ZEEBE_GATEWAY_NETWORK_PORT
#              value: "26500"
#            - name: ZEEBE_GATEWAY_CLUSTER_HOST
#              valueFrom:
#                fieldRef:
#                  fieldPath: status.podIP
#            - name: ZEEBE_GATEWAY_SECURITY_AUTHENTICATION_MODE
#              value: none
#          envFrom:
#          volumeMounts:
#            - mountPath: /tmp
#              name: tmp
#            - name: config
#              mountPath: /usr/local/zeebe/config/application.yaml
#              subPath: application.yaml
#          securityContext:
#            allowPrivilegeEscalation: false
#            privileged: false
#            readOnlyRootFilesystem: true
#            runAsNonRoot: true
#            runAsUser: 1001
#            seccompProfile:
#              type: RuntimeDefault
#          readinessProbe:
#            httpGet:
#              path: /actuator/health/readiness
#              scheme: HTTP
#              port: 9600
#            initialDelaySeconds: 30
#            periodSeconds: 30
#            successThreshold: 1
#            failureThreshold: 5
#            timeoutSeconds: 1
#          resources:
#            limits:
#              cpu: 400m
#              memory: 450Mi
#            requests:
#              cpu: 400m
#              memory: 450Mi
#      volumes:
#        - name: tmp
#          emptyDir: {}
#        - name: config
#          configMap:
#            name: camunda-zeebe-gateway-configuration
#            defaultMode: 484
#      serviceAccountName: camunda-zeebe-gateway
#      securityContext:
#        fsGroup: 1001
#        runAsNonRoot: true
#        seccompProfile:
#          type: RuntimeDefault
#  # yamllint disable
#      affinity:
#        podAntiAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#          - labelSelector:
#              matchExpressions:
#              - key: app.kubernetes.io/component
#                operator: In
#                values:
#                - zeebe-gateway
#            topologyKey: kubernetes.io/hostname
#  # yamllint enable
#---
## Source: camunda-platform/charts/elasticsearch/templates/master/statefulset.yaml
#apiVersion: apps/v1
#kind: StatefulSet
#metadata:
#  name: camunda-elasticsearch-master
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: elasticsearch
#    app.kubernetes.io/version: 8.13.2
#    helm.sh/chart: elasticsearch-20.0.4
#    app.kubernetes.io/component: master
#    ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
#    app: master
#spec:
#  replicas: 2
#  podManagementPolicy: Parallel
#  selector:
#    matchLabels:
#      app.kubernetes.io/instance: camunda
#      app.kubernetes.io/name: elasticsearch
#      app.kubernetes.io/component: master
#  serviceName: camunda-elasticsearch-master-hl
#  updateStrategy:
#    type: RollingUpdate
#  template:
#    metadata:
#      labels:
#        app.kubernetes.io/instance: camunda
#        app.kubernetes.io/managed-by: Helm
#        app.kubernetes.io/name: elasticsearch
#        app.kubernetes.io/version: 8.13.2
#        helm.sh/chart: elasticsearch-20.0.4
#        app.kubernetes.io/component: master
#        ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
#        app: master
#      annotations:
#    spec:
#      serviceAccountName: camunda-elasticsearch-master
#      
#      automountServiceAccountToken: false
#      affinity:
#        podAffinity:
#          
#        podAntiAffinity:
#          
#        nodeAffinity:
#          
#      securityContext:
#        fsGroup: 1001
#        fsGroupChangePolicy: Always
#        supplementalGroups: []
#        sysctls: []
#      initContainers:
#        ## Image that performs the sysctl operation to modify Kernel settings (needed sometimes to avoid boot errors)
#        - name: sysctl
#          image: docker.io/bitnami/os-shell:12-debian-12-r18
#          imagePullPolicy: "IfNotPresent"
#          command:
#            - /bin/bash
#            - -ec
#            - |
#              CURRENT=`sysctl -n vm.max_map_count`;
#              DESIRED="262144";
#              if [ "$DESIRED" -gt "$CURRENT" ]; then
#                  sysctl -w vm.max_map_count=262144;
#              fi;
#              CURRENT=`sysctl -n fs.file-max`;
#              DESIRED="65536";
#              if [ "$DESIRED" -gt "$CURRENT" ]; then
#                  sysctl -w fs.file-max=65536;
#              fi;
#          securityContext:
#            privileged: true
#            runAsUser: 0
#          resources:
#            limits:
#              cpu: 150m
#              ephemeral-storage: 2Gi
#              memory: 192Mi
#            requests:
#              cpu: 100m
#              ephemeral-storage: 50Mi
#              memory: 128Mi
#        - name: copy-default-plugins
#          image: docker.io/bitnami/elasticsearch:8.12.2
#          imagePullPolicy: "IfNotPresent"
#          securityContext:
#            allowPrivilegeEscalation: false
#            capabilities:
#              drop:
#              - ALL
#            privileged: false
#            readOnlyRootFilesystem: true
#            runAsGroup: 1001
#            runAsNonRoot: true
#            runAsUser: 1001
#            seLinuxOptions: {}
#            seccompProfile:
#              type: RuntimeDefault
#          resources:
#            limits:
#              cpu: 2
#              memory: 2Gi
#            requests:
#              cpu: 1
#              memory: 2Gi
#          command:
#            - /bin/bash
#          args:
#            - -ec
#            - |
#              #!/bin/bash
#
#              . /opt/bitnami/scripts/libfs.sh
#              . /opt/bitnami/scripts/elasticsearch-env.sh
#
#              if ! is_dir_empty "$DB_DEFAULT_PLUGINS_DIR"; then
#                  cp -nr "$DB_DEFAULT_PLUGINS_DIR"/* /plugins
#              fi
#          volumeMounts:
#            - name: empty-dir
#              mountPath: /tmp
#              subPath: tmp-dir
#            - name: empty-dir
#              mountPath: /plugins
#              subPath: app-plugins-dir
#      containers:
#        - name: elasticsearch
#          image: docker.io/bitnami/elasticsearch:8.12.2
#          imagePullPolicy: "IfNotPresent"
#          securityContext:
#            allowPrivilegeEscalation: false
#            capabilities:
#              drop:
#              - ALL
#            privileged: false
#            readOnlyRootFilesystem: true
#            runAsGroup: 1001
#            runAsNonRoot: true
#            runAsUser: 1001
#            seLinuxOptions: {}
#            seccompProfile:
#              type: RuntimeDefault
#          env:
#            - name: BITNAMI_DEBUG
#              value: "false"
#            - name: MY_POD_NAME
#              valueFrom:
#                fieldRef:
#                  fieldPath: metadata.name
#            - name: ELASTICSEARCH_IS_DEDICATED_NODE
#              value: "no"
#            - name: ELASTICSEARCH_NODE_ROLES
#              value: "master"
#            - name: ELASTICSEARCH_TRANSPORT_PORT_NUMBER
#              value: "9300"
#            - name: ELASTICSEARCH_HTTP_PORT_NUMBER
#              value: "9200"
#            - name: ELASTICSEARCH_CLUSTER_NAME
#              value: "elastic"
#            
#            - name: ELASTICSEARCH_CLUSTER_HOSTS
#              value: "camunda-elasticsearch-master-hl.zeebe.svc.cluster.local,"
#            - name: ELASTICSEARCH_TOTAL_NODES
#              value: "2"
#            - name: ELASTICSEARCH_CLUSTER_MASTER_HOSTS
#              value: camunda-elasticsearch-master-0 camunda-elasticsearch-master-1 
#            - name: ELASTICSEARCH_MINIMUM_MASTER_NODES
#              value: "2"
#            - name: ELASTICSEARCH_ADVERTISED_HOSTNAME
#              value: "$(MY_POD_NAME).camunda-elasticsearch-master-hl.zeebe.svc.cluster.local"
#            - name: ELASTICSEARCH_HEAP_SIZE
#              value: "1024m"
#            - name: ELASTICSEARCH_ENABLE_REST_TLS
#              value: "false"
#            - name: S3_SECRET_KEY
#              value: minioadmin
#            - name: S3_ACCESS_KEY
#              value: minioadmin
#          ports:
#            - name: rest-api
#              containerPort: 9200
#            - name: transport
#              containerPort: 9300
#          livenessProbe:
#            failureThreshold: 5
#            initialDelaySeconds: 180
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 5
#            tcpSocket:
#              port: rest-api
#          readinessProbe:
#            failureThreshold: 5
#            initialDelaySeconds: 90
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 5
#            exec:
#              command:
#                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
#          resources:
#            limits:
#              cpu: 2
#              memory: 2Gi
#            requests:
#              cpu: 1
#              memory: 2Gi
#          volumeMounts:
#            - name: empty-dir
#              mountPath: /tmp
#              subPath: tmp-dir
#            - name: empty-dir
#              mountPath: /opt/bitnami/elasticsearch/config
#              subPath: app-conf-dir
#            - name: empty-dir
#              mountPath: /opt/bitnami/elasticsearch/tmp
#              subPath: app-tmp-dir
#            - name: empty-dir
#              mountPath: /opt/bitnami/elasticsearch/logs
#              subPath: app-logs-dir
#            - name: empty-dir
#              mountPath: /opt/bitnami/elasticsearch/plugins
#              subPath: app-plugins-dir
#            - name: data
#              mountPath: /bitnami/elasticsearch/data
#            - name: custom-init-scripts
#              mountPath: /docker-entrypoint-initdb.d/init-scripts
#            - mountPath: /bitnami/elasticsearch
#              name: empty-dir
#              subPath: app-volume-dir
#      volumes:
#        - name: empty-dir
#          emptyDir: {}
#        - name: custom-init-scripts
#          configMap:
#            name: camunda-elasticsearch-init-scripts
#  volumeClaimTemplates:
#    - metadata:
#        name: "data"
#      spec:
#        accessModes:
#          - "ReadWriteOnce"
#        resources:
#          requests:
#            storage: "64Gi"
#---
## Source: camunda-platform/charts/identityKeycloak/charts/postgresql/templates/primary/statefulset.yaml
#apiVersion: apps/v1
#kind: StatefulSet
#metadata:
#  name: camunda-postgresql
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: postgresql
#    app.kubernetes.io/version: 16.2.0
#    helm.sh/chart: postgresql-14.3.3
#    app.kubernetes.io/component: primary
#spec:
#  replicas: 1
#  serviceName: camunda-postgresql-hl
#  updateStrategy:
#    rollingUpdate: {}
#    type: RollingUpdate
#  selector:
#    matchLabels:
#      app.kubernetes.io/instance: camunda
#      app.kubernetes.io/name: postgresql
#      app.kubernetes.io/component: primary
#  template:
#    metadata:
#      name: camunda-postgresql
#      labels:
#        app.kubernetes.io/instance: camunda
#        app.kubernetes.io/managed-by: Helm
#        app.kubernetes.io/name: postgresql
#        app.kubernetes.io/version: 16.2.0
#        helm.sh/chart: postgresql-14.3.3
#        app.kubernetes.io/component: primary
#    spec:
#      serviceAccountName: camunda-postgresql
#      
#      automountServiceAccountToken: false
#      affinity:
#        podAffinity:
#          
#        podAntiAffinity:
#          preferredDuringSchedulingIgnoredDuringExecution:
#            - podAffinityTerm:
#                labelSelector:
#                  matchLabels:
#                    app.kubernetes.io/instance: camunda
#                    app.kubernetes.io/name: postgresql
#                    app.kubernetes.io/component: primary
#                topologyKey: kubernetes.io/hostname
#              weight: 1
#        nodeAffinity:
#          
#      securityContext:
#        fsGroup: 1001
#        fsGroupChangePolicy: Always
#        runAsNonRoot: true
#        supplementalGroups: []
#        sysctls: []
#      hostNetwork: false
#      hostIPC: false
#      containers:
#        - name: postgresql
#          image: docker.io/bitnami/postgresql:15.10.0-debian-12-r2
#          imagePullPolicy: "IfNotPresent"
#          securityContext:
#            allowPrivilegeEscalation: false
#            capabilities:
#              drop:
#              - ALL
#            privileged: false
#            readOnlyRootFilesystem: true
#            runAsGroup: 0
#            runAsNonRoot: true
#            runAsUser: 1001
#            seLinuxOptions: null
#            seccompProfile:
#              type: RuntimeDefault
#          env:
#            - name: BITNAMI_DEBUG
#              value: "false"
#            - name: POSTGRESQL_PORT_NUMBER
#              value: "5432"
#            - name: POSTGRESQL_VOLUME_DIR
#              value: "/bitnami/postgresql"
#            - name: PGDATA
#              value: "/bitnami/postgresql/data"
#            # Authentication
#            - name: POSTGRES_USER
#              value: "bn_keycloak"
#            - name: POSTGRES_PASSWORD
#              valueFrom:
#                secretKeyRef:
#                  name: camunda-postgresql
#                  key: password
#            - name: POSTGRES_POSTGRES_PASSWORD
#              valueFrom:
#                secretKeyRef:
#                  name: camunda-postgresql
#                  key: postgres-password
#            - name: POSTGRES_DATABASE
#              value: "bitnami_keycloak"
#            # Replication
#            # Initdb
#            # Standby
#            # LDAP
#            - name: POSTGRESQL_ENABLE_LDAP
#              value: "no"
#            # TLS
#            - name: POSTGRESQL_ENABLE_TLS
#              value: "no"
#            # Audit
#            - name: POSTGRESQL_LOG_HOSTNAME
#              value: "false"
#            - name: POSTGRESQL_LOG_CONNECTIONS
#              value: "false"
#            - name: POSTGRESQL_LOG_DISCONNECTIONS
#              value: "false"
#            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
#              value: "off"
#            # Others
#            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
#              value: "error"
#            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
#              value: "pgaudit"
#          ports:
#            - name: tcp-postgresql
#              containerPort: 5432
#          livenessProbe:
#            failureThreshold: 6
#            initialDelaySeconds: 30
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 5
#            exec:
#              command:
#                - /bin/sh
#                - -c
#                - exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
#          readinessProbe:
#            failureThreshold: 6
#            initialDelaySeconds: 5
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 5
#            exec:
#              command:
#                - /bin/sh
#                - -c
#                - -e
#                - |
#                  exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
#                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
#          volumeMounts:
#            - name: empty-dir
#              mountPath: /tmp
#              subPath: tmp-dir
#            - name: empty-dir
#              mountPath: /opt/bitnami/postgresql/conf
#              subPath: app-conf-dir
#            - name: empty-dir
#              mountPath: /opt/bitnami/postgresql/tmp
#              subPath: app-tmp-dir
#            - name: empty-dir
#              mountPath: /opt/bitnami/postgresql/logs
#              subPath: app-logs-dir
#            - name: dshm
#              mountPath: /dev/shm
#            - name: data
#              mountPath: /bitnami/postgresql
#      volumes:
#        - name: empty-dir
#          emptyDir: {}
#        - name: dshm
#          emptyDir:
#            medium: Memory
#  volumeClaimTemplates:
#    - apiVersion: v1
#      kind: PersistentVolumeClaim
#      metadata:
#        name: data
#      spec:
#        accessModes:
#          - "ReadWriteOnce"
#        resources:
#          requests:
#            storage: "8Gi"
#---
## Source: camunda-platform/charts/identityKeycloak/templates/statefulset.yaml
#apiVersion: apps/v1
#kind: StatefulSet
#metadata:
#  name: camunda-keycloak
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: keycloak
#    app.kubernetes.io/version: 23.0.7
#    helm.sh/chart: identityKeycloak-19.4.1
#    app.kubernetes.io/component: keycloak
#spec:
#  replicas: 1
#  revisionHistoryLimit: 10
#  podManagementPolicy: Parallel
#  serviceName: camunda-keycloak-headless
#  updateStrategy:
#    rollingUpdate: {}
#    type: RollingUpdate
#  selector:
#    matchLabels:
#      app.kubernetes.io/instance: camunda
#      app.kubernetes.io/name: keycloak
#      app.kubernetes.io/component: keycloak
#  template:
#    metadata:
#      annotations:
#        checksum/configmap-env-vars: b80014c97b3d27d62b3e58d80292de5ed4549ef268164c302740d0e83761b288
#        checksum/secrets: 068ab2c3b0abc752d913090a4ab2220222fa904c0881351819e59b9e2c3550c4
#      labels:
#        app.kubernetes.io/instance: camunda
#        app.kubernetes.io/managed-by: Helm
#        app.kubernetes.io/name: keycloak
#        app.kubernetes.io/version: 23.0.7
#        helm.sh/chart: identityKeycloak-19.4.1
#        app.kubernetes.io/component: keycloak
#    spec:
#      serviceAccountName: camunda-keycloak
#      
#      automountServiceAccountToken: true
#      affinity:
#        podAffinity:
#          
#        podAntiAffinity:
#          preferredDuringSchedulingIgnoredDuringExecution:
#            - podAffinityTerm:
#                labelSelector:
#                  matchLabels:
#                    app.kubernetes.io/instance: camunda
#                    app.kubernetes.io/name: keycloak
#                topologyKey: kubernetes.io/hostname
#              weight: 1
#        nodeAffinity:
#          
#      securityContext:
#        fsGroup: 1001
#        fsGroupChangePolicy: Always
#        runAsNonRoot: true
#        supplementalGroups: []
#        sysctls: []
#      enableServiceLinks: true
#      initContainers:
#        - name: init-quarkus-directory
#          image: docker.io/bitnami/keycloak:23.0.7
#          imagePullPolicy: IfNotPresent
#          command:
#            - /bin/bash
#          args:
#            - -ec
#            - |
#              #!/bin/bash
#              cp -r /opt/bitnami/keycloak/lib/quarkus/* /quarkus
#          securityContext:
#            allowPrivilegeEscalation: false
#            capabilities:
#              drop:
#              - ALL
#            privileged: false
#            readOnlyRootFilesystem: true
#            runAsGroup: 0
#            runAsNonRoot: true
#            runAsUser: 1001
#            seccompProfile:
#              type: RuntimeDefault
#          volumeMounts:
#            - name: empty-dir
#              mountPath: /tmp
#              subPath: tmp-dir
#            - name: empty-dir
#              mountPath: /quarkus
#              subPath: app-quarkus-dir
#        - command:
#          - sh
#          - -c
#          - cp -a /app/keycloak-theme/* /mnt
#          image: 'docker.io/camunda/identity:8.5.11'
#          imagePullPolicy: 'IfNotPresent'
#          name: copy-camunda-theme
#          securityContext:
#            allowPrivilegeEscalation: false
#            capabilities:
#              drop:
#              - ALL
#            privileged: false
#            readOnlyRootFilesystem: true
#            runAsNonRoot: true
#            runAsUser: 1001
#            seccompProfile:
#              type: RuntimeDefault
#          volumeMounts:
#          - mountPath: /mnt
#            name: camunda-theme
#      containers:
#        - name: keycloak
#          image: docker.io/bitnami/keycloak:23.0.7
#          imagePullPolicy: IfNotPresent
#          securityContext:
#            allowPrivilegeEscalation: false
#            capabilities:
#              drop:
#              - ALL
#            privileged: false
#            readOnlyRootFilesystem: true
#            runAsGroup: 0
#            runAsNonRoot: true
#            runAsUser: 1001
#            seccompProfile:
#              type: RuntimeDefault
#          env:
#            - name: KUBERNETES_NAMESPACE
#              valueFrom:
#                fieldRef:
#                  apiVersion: v1
#                  fieldPath: metadata.namespace
#            - name: BITNAMI_DEBUG
#              value: "false"
#            - name: KEYCLOAK_ADMIN_PASSWORD
#              valueFrom:
#                secretKeyRef:
#                  name: camunda-keycloak
#                  key: admin-password
#            - name: KEYCLOAK_DATABASE_PASSWORD
#              valueFrom:
#                secretKeyRef:
#                  name: camunda-postgresql
#                  key: password
#            - name: KEYCLOAK_HTTP_RELATIVE_PATH
#              value: "/auth/"
#            - name: KEYCLOAK_PROXY_ADDRESS_FORWARDING
#              value: 'false'
#          envFrom:
#            - configMapRef:
#                name: camunda-keycloak-env-vars
#          ports:
#            - name: http
#              containerPort: 8080
#              protocol: TCP
#            - name: infinispan
#              containerPort: 7800
#              protocol: TCP
#          livenessProbe:
#            failureThreshold: 3
#            initialDelaySeconds: 300
#            periodSeconds: 1
#            successThreshold: 1
#            timeoutSeconds: 5
#            httpGet:
#              path: /auth/
#              port: http
#          readinessProbe:
#            failureThreshold: 3
#            initialDelaySeconds: 30
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 1
#            httpGet:
#              path: /auth/realms/master
#              port: http
#          volumeMounts:
#            - name: empty-dir
#              mountPath: /tmp
#              subPath: tmp-dir
#            - name: empty-dir
#              mountPath: /opt/bitnami/keycloak/conf
#              subPath: app-conf-dir
#            - name: empty-dir
#              mountPath: /opt/bitnami/keycloak/lib/quarkus
#              subPath: app-quarkus-dir
#            - mountPath: /opt/bitnami/keycloak/themes/identity
#              name: camunda-theme
#            - mountPath: /opt/bitnami/keycloak/data/tmp
#              name: data-tmp
#      volumes:
#        - name: empty-dir
#          emptyDir: {}
#        - emptyDir: {}
#          name: data-tmp
#        - emptyDir:
#            sizeLimit: 10Mi
#          name: camunda-theme
#---
## Source: camunda-platform/templates/zeebe/statefulset.yaml
#apiVersion: apps/v1
#kind: StatefulSet
#metadata:
#  name: "camunda-zeebe"
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: zeebe-broker
#    app.kubernetes.io/version: "8.5.12"
#  annotations:
#spec:
#  replicas: 3
#  selector:
#    matchLabels:
#      app: camunda-platform
#      app.kubernetes.io/name: camunda-platform
#      app.kubernetes.io/instance: camunda
#      app.kubernetes.io/managed-by: Helm
#      app.kubernetes.io/part-of: camunda-platform
#      app.kubernetes.io/component: zeebe-broker
#  serviceName: "camunda-zeebe"
#  updateStrategy:
#    type: RollingUpdate
#  podManagementPolicy: Parallel
#  template:
#    metadata:
#      labels:
#        app: camunda-platform
#        app.kubernetes.io/name: camunda-platform
#        app.kubernetes.io/instance: camunda
#        app.kubernetes.io/managed-by: Helm
#        app.kubernetes.io/part-of: camunda-platform
#        helm.sh/chart: camunda-platform-10.4.8
#        app.kubernetes.io/component: zeebe-broker
#        app.kubernetes.io/version: "8.5.12"
#      annotations:
#        checksum/config: dda26f29ab56139fa8d49a44ce2a43874b213f39a1e052508febc1fc734856bb
#    spec:
#      imagePullSecrets:
#        []
#      initContainers:
#        []
#      containers:
#        - name: zeebe
#          image: camunda/zeebe:8.5.12
#          imagePullPolicy: IfNotPresent
#          securityContext:
#            allowPrivilegeEscalation: false
#            privileged: false
#            readOnlyRootFilesystem: true
#            runAsNonRoot: true
#            runAsUser: 1001
#            seccompProfile:
#              type: RuntimeDefault
#          env:
#            - name: LC_ALL
#              value: C.UTF-8
#            - name: K8S_NAME
#              valueFrom:
#                fieldRef:
#                  fieldPath: metadata.name
#            - name: K8S_SERVICE_NAME
#              value: "camunda-zeebe"
#            - name: K8S_NAMESPACE
#              valueFrom:
#                fieldRef:
#                  fieldPath: metadata.namespace
#            - name: ZEEBE_BROKER_NETWORK_ADVERTISEDHOST
#              value: "$(K8S_NAME).$(K8S_SERVICE_NAME)"
#            - name: ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS
#              value:
#                $(K8S_SERVICE_NAME)-0.$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc:26502,
#                $(K8S_SERVICE_NAME)-1.$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc:26502,
#                $(K8S_SERVICE_NAME)-2.$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc:26502,
#            - name: ZEEBE_LOG_LEVEL
#              value: "info"
#            - name: ZEEBE_BROKER_GATEWAY_ENABLE
#              value: "false"
#            - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME
#              value: "io.camunda.zeebe.exporter.ElasticsearchExporter"
#            - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL
#              value: "http://camunda-elasticsearch:9200"
#            - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_INDEX_PREFIX
#              value: "zeebe-record"
#            - name: JAVA_TOOL_OPTIONS
#              value: "-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/zeebe/data -XX:ErrorFile=/usr/local/zeebe/data/zeebe_error%p.log -XX:+ExitOnOutOfMemoryError"
#            - name: K8S_POD_NAME
#              valueFrom:
#                fieldRef:
#                  fieldPath: metadata.name
#            - name: ZEEBE_BROKER_DATA_BACKUP_STORE
#              value: S3
#            - name: ZEEBE_BROKER_DATA_BACKUP_S3_BUCKETNAME
#              value: zeebe-backup
#            - name: ZEEBE_BROKER_DATA_BACKUP_S3_FORCEPATHSTYLEACCESS
#              value: "true"
#            - name: ZEEBE_BROKER_DATA_BACKUP_S3_ENDPOINT
#              value: http://minio:9000
#            - name: ZEEBE_BROKER_DATA_BACKUP_S3_ACCESSKEY
#              value: minioadmin
#            - name: ZEEBE_BROKER_DATA_BACKUP_S3_SECRETKEY
#              value: minioadmin
#            - name: ZEEBE_BROKER_DATA_BACKUP_S3_REGION
#              value: us-east-1
#          ports:
#            - containerPort: 9600
#              name: http
#            - containerPort: 26501
#              name: command
#            - containerPort: 26502
#              name: internal
#          readinessProbe:
#            httpGet:
#              path: /actuator/health/readiness
#              scheme: HTTP
#              port: 9600
#            initialDelaySeconds: 30
#            periodSeconds: 30
#            successThreshold: 1
#            failureThreshold: 5
#            timeoutSeconds: 1
#          resources:
#            limits:
#              cpu: 960m
#              memory: 1920Mi
#            requests:
#              cpu: 800m
#              memory: 1200Mi
#          volumeMounts:
#            - name: config
#              mountPath: /usr/local/bin/startup.sh
#              subPath: startup.sh
#            - name: data
#              mountPath: /usr/local/zeebe/data
#            - name: exporters
#              mountPath: /exporters
#            - mountPath: /tmp
#              name: tmp
#            - name: config
#              mountPath: /usr/local/zeebe/config/application.yaml
#              subPath: application.yaml
#      volumes:
#        - name: config
#          configMap:
#            name: camunda-zeebe-configuration
#            defaultMode: 492
#        - name: exporters
#          emptyDir: {}
#        - name: tmp
#          emptyDir: {}
#      serviceAccountName: camunda-zeebe
#      securityContext:
#        fsGroup: 1001
#        runAsNonRoot: true
#        seccompProfile:
#          type: RuntimeDefault
## yamllint disable
#      affinity:
#        podAntiAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#          - labelSelector:
#              matchExpressions:
#              - key: app.kubernetes.io/component
#                operator: In
#                values:
#                - zeebe-broker
#            topologyKey: kubernetes.io/hostname
## yamllint enable
#  volumeClaimTemplates:
#    - metadata:
#        name: data
#        annotations:
#          {}
#      spec:
#        accessModes: [ReadWriteOnce]
#        resources:
#          requests:
#            storage: "32Gi"
#---
## Source: camunda-platform/charts/identityKeycloak/templates/ingress.yaml
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: camunda-keycloak
#  namespace: "zeebe"
#  labels:
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: keycloak
#    app.kubernetes.io/version: 23.0.7
#    helm.sh/chart: identityKeycloak-19.4.1
#    app.kubernetes.io/component: keycloak
#  annotations:
#    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
#    nginx.ingress.kubernetes.io/proxy-buffering: "on"
#spec:
#  rules:
#    - host: "cp-keycloak.k8s.orb.local"
#      http:
#        paths:
#          - path: /auth/
#            pathType: Prefix
#            backend:
#              service:
#                name: camunda-keycloak
#                port:
#                  name: http
#---
## Source: camunda-platform/templates/identity/ingress.yaml
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: camunda-identity
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: identity
#    app.kubernetes.io/version: "8.5.11"
#  annotations:
#    ingress.kubernetes.io/rewrite-target: /
#    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
#    nginx.ingress.kubernetes.io/proxy-buffering: "on"
#    nginx.ingress.kubernetes.io/ssl-redirect: "false"
#spec:
#  ingressClassName: nginx
#  rules:
#    - host: cp-identity.k8s.orb.local
#      http:
#        paths:
#          - path: /
#            pathType: Prefix
#            backend:
#              service:
#                name: camunda-identity
#                port:
#                  number: 80
#---
## Source: camunda-platform/templates/operate/ingress.yaml
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: camunda-operate
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    app.kubernetes.io/component: operate
#    app.kubernetes.io/version: "8.5.10"
#  annotations:
#    ingress.kubernetes.io/rewrite-target: /
#    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
#    nginx.ingress.kubernetes.io/proxy-buffering: "on"
#    nginx.ingress.kubernetes.io/ssl-redirect: "false"
#spec:
#  ingressClassName: nginx
#  rules:
#    - host: cp-operate.k8s.orb.local
#      http:
#        paths:
#          - path: /
#            pathType: Prefix
#            backend:
#              service:
#                name: camunda-operate
#                port:
#                  number: 80
#---
## Source: camunda-platform/templates/service-monitor/identity-service-monitor.yaml
#apiVersion: monitoring.coreos.com/v1
#kind: ServiceMonitor
#metadata:
#  name: camunda-camunda-platform-identity
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    release: prometheus
#spec:
#  selector:
#    matchLabels:
#      app: camunda-platform
#      app.kubernetes.io/component: identity
#  endpoints:
#    - honorLabels: true
#      path: /actuator/prometheus
#      port: metrics
#      interval: 10s
#---
## Source: camunda-platform/templates/service-monitor/operate-service-monitor.yaml
#apiVersion: monitoring.coreos.com/v1
#kind: ServiceMonitor
#metadata:
#  name: camunda-camunda-platform-operate
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    release: prometheus
#spec:
#  selector:
#    matchLabels:
#      app: camunda-platform
#      app.kubernetes.io/component: operate
#  endpoints:
#    - honorLabels: true
#      path: /actuator/prometheus
#      port: http
#      interval: 10s
#---
## Source: camunda-platform/templates/service-monitor/optimize-service-monitor.yaml
#apiVersion: monitoring.coreos.com/v1
#kind: ServiceMonitor
#metadata:
#  name: camunda-camunda-platform-optimize
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    release: prometheus
#spec:
#  selector:
#    matchLabels:
#      app: camunda-platform
#      app.kubernetes.io/component: optimize
#  endpoints:
#    - honorLabels: true
#      path: /actuator/prometheus
#      port: management
#      interval: 10s
#---
## Source: camunda-platform/templates/service-monitor/tasklist-service-monitor.yaml
#apiVersion: monitoring.coreos.com/v1
#kind: ServiceMonitor
#metadata:
#  name: camunda-camunda-platform-tasklist
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    release: prometheus
#spec:
#  selector:
#    matchLabels:
#      app: camunda-platform
#      app.kubernetes.io/component: tasklist
#  endpoints:
#    - honorLabels: true
#      path: /actuator/prometheus
#      port: http
#      interval: 10s
#---
## Source: camunda-platform/templates/service-monitor/zeebe-gateway-service-monitor.yaml
#apiVersion: monitoring.coreos.com/v1
#kind: ServiceMonitor
#metadata:
#  name: camunda-camunda-platform-zeebe-gateway
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    release: prometheus
#spec:
#  selector:
#    matchLabels:
#      app: camunda-platform
#      app.kubernetes.io/component: zeebe-gateway
#  endpoints:
#    - honorLabels: true
#      path: /actuator/prometheus
#      port: http
#      interval: 10s
#---
## Source: camunda-platform/templates/service-monitor/zeebe-service-monitor.yaml
#apiVersion: monitoring.coreos.com/v1
#kind: ServiceMonitor
#metadata:
#  name: camunda-camunda-platform-zeebe
#  labels:
#    app: camunda-platform
#    app.kubernetes.io/name: camunda-platform
#    app.kubernetes.io/instance: camunda
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/part-of: camunda-platform
#    helm.sh/chart: camunda-platform-10.4.8
#    release: prometheus
#spec:
#  selector:
#    matchLabels:
#      app: camunda-platform
#      app.kubernetes.io/component: zeebe-broker
#  endpoints:
#    - honorLabels: true
#      path: /actuator/prometheus
#      port: http
#      interval: 10s
#
#
